{
  "$loki": 492,
  "basePath": "/calls",
  "consumes": ["application/x-www-form-urlencoded", "application/json"],
  "definitions": {
    "Authors Response": {
      "properties": {
        "authors": {
          "items": {
            "description": "author name",
            "type": "string"
          },
          "type": "array"
        },
        "status": {
          "description": "success / failure status indicating whether the request was processed.",
          "type": "string"
        },
        "url": {
          "description": "http url information was requested for",
          "type": "string"
        }
      }
    },
    "Combined Call Response": {
      "properties": {
        "author": {
          "description": "author name",
          "type": "string"
        },
        "concepts": {
          "items": {
            "$ref": "#/definitions/concept"
          },
          "type": "array"
        },
        "dates": {
          "items": {
            "$ref": "#/definitions/extracted_date"
          },
          "type": "array"
        },
        "docEmotions": {
          "$ref": "#/definitions/docEmotions"
        },
        "docSentiment": {
          "$ref": "#/definitions/docSentiment"
        },
        "entities": {
          "items": {
            "$ref": "#/definitions/entity"
          },
          "type": "array"
        },
        "feeds": {
          "items": {
            "$ref": "#/definitions/feed"
          },
          "type": "array"
        },
        "keywords": {
          "items": {
            "$ref": "#/definitions/keyword"
          },
          "type": "array"
        },
        "language": {
          "description": "the detected language of the processed text",
          "type": "string"
        },
        "publicationDate": {
          "$ref": "#/definitions/publicationDate"
        },
        "relations": {
          "items": {
            "$ref": "#/definitions/relation"
          },
          "type": "array"
        },
        "status": {
          "description": "success / failure status indicating whether the request was processed",
          "type": "string"
        },
        "taxonomy": {
          "items": {
            "$ref": "#/definitions/category"
          },
          "type": "array"
        },
        "text": {
          "description": "document text, returned if showSourceText is set to 1",
          "type": "string"
        },
        "title": {
          "description": "document title",
          "type": "string"
        },
        "totalTransactions": {
          "description": "number of API transactions used in the combined call",
          "type": "string"
        },
        "typedRelations": {
          "items": {
            "$ref": "#/definitions/typedRelation"
          },
          "type": "array"
        },
        "url": {
          "description": "the URL passed in the 'url' input parameter",
          "type": "string"
        }
      }
    },
    "Concepts Response": {
      "properties": {
        "concepts": {
          "items": {
            "$ref": "#/definitions/concept"
          },
          "type": "array"
        },
        "language": {
          "description": "detected language of the source text",
          "type": "string"
        },
        "status": {
          "description": "success / failure status indicating whether the request was processed.",
          "type": "string"
        },
        "text": {
          "description": "document text",
          "type": "string"
        },
        "url": {
          "description": "HTTP URL passed in the request",
          "type": "string"
        }
      }
    },
    "Date Extraction Response": {
      "properties": {
        "dates": {
          "items": {
            "$ref": "#/definitions/extracted_date"
          },
          "type": "array"
        },
        "language": {
          "description": "the detected language of the source text",
          "type": "string"
        },
        "status": {
          "description": "success / failure status indicating whether the request was processed.",
          "type": "string"
        },
        "text": {
          "description": "Source text of the document. Appears if showSourceText=1",
          "type": "string"
        },
        "url": {
          "description": "http url information was requested for",
          "type": "string"
        }
      }
    },
    "Document Sentiment Response": {
      "properties": {
        "docSentiment": {
          "$ref": "#/definitions/docSentiment"
        },
        "language": {
          "description": "detected language of the source text",
          "type": "string"
        },
        "status": {
          "description": "success / failure status indicating whether the request was processed.",
          "type": "string"
        },
        "text": {
          "description": "document text",
          "type": "string"
        },
        "url": {
          "description": "http url information was requested for",
          "type": "string"
        }
      }
    },
    "Emotion Analysis Response": {
      "properties": {
        "docEmotions": {
          "$ref": "#/definitions/docEmotions"
        },
        "language": {
          "description": "detected language of the source text",
          "type": "string"
        },
        "status": {
          "description": "success / failure status indicating whether the request was processed.",
          "type": "string"
        },
        "url": {
          "description": "HTTP URL passed in the request",
          "type": "string"
        }
      }
    },
    "Entities Response": {
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/entity"
          },
          "type": "array"
        },
        "language": {
          "description": "detected language of the source text",
          "type": "string"
        },
        "status": {
          "description": "success / failure status indicating whether the request was processed.",
          "type": "string"
        },
        "text": {
          "description": "document text",
          "type": "string"
        },
        "url": {
          "description": "HTTP URL passed in the request",
          "type": "string"
        }
      }
    },
    "FaceTags": {
      "properties": {
        "imageFaces": {
          "items": {
            "properties": {
              "age": {
                "properties": {
                  "ageRange": {
                    "description": "approximate age range for a detected face",
                    "type": "string"
                  },
                  "score": {
                    "type": "number"
                  }
                },
                "type": "object"
              },
              "disambiguated": {
                "$ref": "#/definitions/disambiguated"
              },
              "gender": {
                "properties": {
                  "gender": {
                    "description": "gender for a detected face",
                    "type": "string"
                  },
                  "score": {
                    "type": "number"
                  }
                },
                "type": "object"
              },
              "height": {
                "description": "height, in pixels, of a detected face",
                "type": "number"
              },
              "identity": {
                "properties": {
                  "knowledgeGraph": {
                    "$ref": "#/definitions/knowledgeGraph"
                  },
                  "name": {
                    "description": "if the detected face is identified as a known celebrity, this field will provide the person's name",
                    "type": "string"
                  },
                  "score": {
                    "type": "number"
                  }
                },
                "type": "object"
              },
              "positionX": {
                "description": "coordinate of the left-most pixel for a detected face",
                "type": "number"
              },
              "positionY": {
                "description": "coordinate of the top-most pixel for a detected face",
                "type": "number"
              },
              "width": {
                "description": "width, in pixels, of a detected face",
                "type": "number"
              }
            }
          },
          "type": "array"
        },
        "status": {
          "description": "success / failure status indicating whether the request was processed.",
          "type": "string"
        },
        "totalTransactions": {
          "description": "number of transactions charged",
          "type": "string"
        },
        "url": {
          "description": "http url information was requested for",
          "type": "string"
        }
      }
    },
    "Feed Detection Response": {
      "properties": {
        "feeds": {
          "items": {
            "$ref": "#/definitions/feed"
          },
          "type": "array"
        },
        "status": {
          "description": "success / failure status indicating whether the request was processed.",
          "type": "string"
        },
        "url": {
          "description": "HTTP URL passed in the request",
          "type": "string"
        }
      }
    },
    "ImageKeywords": {
      "properties": {
        "imageKeywords": {
          "items": {
            "$ref": "#/definitions/imageKeyword"
          },
          "type": "array"
        },
        "status": {
          "description": "success / failure status indicating whether the request was processed.",
          "type": "string"
        },
        "totalTransactions": {
          "description": "number of transactions charged",
          "type": "string"
        },
        "url": {
          "description": "http url information was requested for",
          "type": "string"
        }
      }
    },
    "ImageLink": {
      "properties": {
        "image": {
          "description": "URL of the detected image",
          "type": "string"
        },
        "status": {
          "description": "success / failure status indicating whether the request was processed.",
          "type": "string"
        },
        "totalTransactions": {
          "description": "transactions charged",
          "type": "string"
        },
        "url": {
          "description": "http url information was requested for",
          "type": "string"
        }
      }
    },
    "Keywords Response": {
      "properties": {
        "keywords": {
          "items": {
            "$ref": "#/definitions/keyword"
          },
          "type": "array"
        },
        "language": {
          "description": "detected language of the source text",
          "type": "string"
        },
        "status": {
          "description": "success / failure status indicating whether the request was processed.",
          "type": "string"
        },
        "text": {
          "description": "document text",
          "type": "string"
        },
        "url": {
          "description": "HTTP URL passed in the request",
          "type": "string"
        }
      }
    },
    "Language Response": {
      "properties": {
        "ethnologue": {
          "description": "link to Ethnologue containing information on the detected language",
          "type": "string"
        },
        "iso-639-1": {
          "description": "ISO-639-1 code for the detected language",
          "type": "string"
        },
        "iso-639-2": {
          "description": "ISO-639-2 code for the detected language",
          "type": "string"
        },
        "iso-639-3": {
          "description": "ISO-639-3 code for the detected language",
          "type": "string"
        },
        "language": {
          "description": "detected language",
          "type": "string"
        },
        "native-speakers": {
          "description": "number of persons who natively speak the detected language",
          "type": "string"
        },
        "status": {
          "description": "success / failure status indicating whether the request was processed.",
          "type": "string"
        },
        "url": {
          "description": "http url information was requested for",
          "type": "string"
        },
        "wikipedia": {
          "description": "link to the Wikipedia page for the detected language",
          "type": "string"
        }
      }
    },
    "Microformats Response": {
      "properties": {
        "microformats": {
          "items": {
            "$ref": "#/definitions/microformat"
          },
          "type": "array"
        },
        "status": {
          "description": "success / failure status indicating whether the request was processed.",
          "type": "string"
        },
        "url": {
          "description": "http url information was requested for",
          "type": "string"
        }
      }
    },
    "Publication Date Response": {
      "properties": {
        "publicationDate": {
          "$ref": "#/definitions/publicationDate"
        },
        "status": {
          "description": "success / failure status indicating whether the request was processed.",
          "type": "string"
        },
        "url": {
          "description": "http url information was requested for",
          "type": "string"
        }
      }
    },
    "Relations Response": {
      "properties": {
        "language": {
          "description": "detected language of the source text",
          "type": "string"
        },
        "relations": {
          "items": {
            "$ref": "#/definitions/relation"
          },
          "type": "array"
        },
        "status": {
          "description": "success / failure status indicating whether the request was processed.",
          "type": "string"
        },
        "text": {
          "description": "document text",
          "type": "string"
        },
        "url": {
          "description": "HTTP URL passed in the request",
          "type": "string"
        }
      }
    },
    "Targeted Emotion Response": {
      "properties": {
        "language": {
          "description": "detected language of the source text",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/targetedEmotionResult"
          },
          "type": "array"
        },
        "status": {
          "description": "success / failure status indicating whether the request was processed.",
          "type": "string"
        },
        "text": {
          "description": "document text",
          "type": "string"
        },
        "url": {
          "description": "HTTP URL passed in the request",
          "type": "string"
        }
      }
    },
    "Targeted Sentiment Response": {
      "properties": {
        "language": {
          "description": "detected language of the source text",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/result"
          },
          "type": "array"
        },
        "status": {
          "description": "success / failure status indicating whether the request was processed.",
          "type": "string"
        },
        "text": {
          "description": "document text",
          "type": "string"
        },
        "url": {
          "description": "http url information was requested for",
          "type": "string"
        }
      }
    },
    "Taxonomy Results": {
      "properties": {
        "language": {
          "description": "detected language of the source text",
          "type": "string"
        },
        "status": {
          "description": "success / failure status indicating whether the request was processed.",
          "type": "string"
        },
        "taxonomy": {
          "items": {
            "$ref": "#/definitions/category"
          },
          "type": "array"
        },
        "text": {
          "description": "document text",
          "type": "string"
        },
        "url": {
          "description": "HTTP URL passed in the request",
          "type": "string"
        }
      }
    },
    "Text": {
      "properties": {
        "status": {
          "description": "success / failure status indicating whether the request was processed.",
          "type": "string"
        },
        "text": {
          "description": "document text",
          "type": "string"
        },
        "url": {
          "description": "HTTP URL passed in the request",
          "type": "string"
        }
      }
    },
    "Title": {
      "properties": {
        "status": {
          "description": "success / failure status indicating whether the request was processed.",
          "type": "string"
        },
        "title": {
          "description": "document title",
          "type": "string"
        },
        "url": {
          "description": "HTTP URL passed in the request",
          "type": "string"
        }
      }
    },
    "Typed Relations Response": {
      "properties": {
        "language": {
          "description": "Language of the source text",
          "type": "string"
        },
        "model": {
          "description": "ID of the model that was used to identify entities and relations",
          "type": "string"
        },
        "status": {
          "description": "success / failure status indicating whether the request was processed",
          "type": "string"
        },
        "typedRelations": {
          "items": {
            "$ref": "#/definitions/typedRelation"
          },
          "type": "array"
        },
        "url": {
          "description": "HTTP URL passed in the request",
          "type": "string"
        }
      }
    },
    "action": {
      "properties": {
        "lemmatized": {
          "description": "lemmatized text of the detected relation action",
          "type": "string"
        },
        "text": {
          "description": "the detected action text",
          "type": "string"
        },
        "verb": {
          "$ref": "#/definitions/verb"
        }
      }
    },
    "category": {
      "properties": {
        "confident": {
          "description": "will return \"no\" if categorization doesn't meet confidence standards",
          "type": "string"
        },
        "label": {
          "description": "detected category",
          "type": "string"
        },
        "score": {
          "description": "confidence score for the detected category 0.0 .. 1.0 (higher is better)",
          "type": "string"
        }
      }
    },
    "concept": {
      "properties": {
        "census": {
          "description": "sameAs link to the US Census",
          "type": "string"
        },
        "ciaFactbook": {
          "description": "sameAs link to the CIA World Factbook",
          "type": "string"
        },
        "crunchbase": {
          "description": "sameAs link to CrunchBase",
          "type": "string"
        },
        "dbpedia": {
          "description": "sameAs link to DBpedia",
          "type": "string"
        },
        "freebase": {
          "description": "sameAs link to Freebase",
          "type": "string"
        },
        "geo": {
          "description": "latitude longitude - geographic coordinates associated with this result.",
          "type": "string"
        },
        "geonames": {
          "description": "sameAs link to Geonames",
          "type": "string"
        },
        "knowledgeGraph": {
          "$ref": "#/definitions/knowledgeGraph"
        },
        "musicBrainz": {
          "description": "sameAs link to MusicBrainz",
          "type": "string"
        },
        "opencyc": {
          "description": "sameAs link to OpenCyc",
          "type": "string"
        },
        "relevance": {
          "description": "relevance score for a detected concept tag. 0.0 .. 1.0 (higher is better)",
          "type": "string"
        },
        "text": {
          "description": "the detected concept tag",
          "type": "string"
        },
        "website": {
          "description": "the website associated with the result",
          "type": "string"
        },
        "yago": {
          "description": "sameAs link to YAGO",
          "type": "string"
        }
      }
    },
    "disambiguated": {
      "properties": {
        "census": {
          "description": "sameAs link to the US Census",
          "type": "string"
        },
        "ciaFactbook": {
          "description": "sameAs link to the CIA World Factbook",
          "type": "string"
        },
        "crunchbase": {
          "description": "sameAs link to CrunchBase",
          "type": "string"
        },
        "dbpedia": {
          "description": "sameAs link to DBPedia",
          "type": "string"
        },
        "freebase": {
          "description": "sameAs link to Freebase",
          "type": "string"
        },
        "geo": {
          "description": "latitude longitude - geographic coordinates associated with this result",
          "type": "string"
        },
        "geonames": {
          "description": "sameAs link to Geonames",
          "type": "string"
        },
        "musicBrainz": {
          "description": "sameAs link to MusicBrainz",
          "type": "string"
        },
        "name": {
          "description": "name of the disambiguated entity",
          "type": "string"
        },
        "opencyc": {
          "description": "sameAs link to OpenCyc",
          "type": "string"
        },
        "subType": {
          "items": {
            "description": "subType of the disambiguated entity",
            "type": "string"
          },
          "type": "array"
        },
        "umbel": {
          "description": "sameAs link to UMBEL",
          "type": "string"
        },
        "website": {
          "description": "the website associated with the result",
          "type": "string"
        },
        "yago": {
          "description": "sameAs link to YAGO",
          "type": "string"
        }
      }
    },
    "docEmotions": {
      "properties": {
        "anger": {
          "description": "probability that the text implies anger",
          "type": "string"
        },
        "disgust": {
          "description": "probability that the text implies disgust",
          "type": "string"
        },
        "fear": {
          "description": "probability that the text implies fear",
          "type": "string"
        },
        "joy": {
          "description": "probability that the text implies joy",
          "type": "string"
        },
        "sadness": {
          "description": "probability that the text implies sadness",
          "type": "string"
        }
      }
    },
    "docSentiment": {
      "properties": {
        "mixed": {
          "description": "whether sentiment is mixed (both positive and negative) (1 == mixed)",
          "type": "string"
        },
        "score": {
          "description": "sentiment strength (0.0 == neutral)",
          "type": "string"
        },
        "type": {
          "description": "sentiment polarity - \"positive\", \"negative\", or \"neutral\"",
          "type": "string"
        }
      }
    },
    "entity": {
      "properties": {
        "count": {
          "description": "number of times an entity was seen within the source text",
          "type": "string"
        },
        "disambiguated": {
          "$ref": "#/definitions/disambiguated"
        },
        "knowledgeGraph": {
          "$ref": "#/definitions/knowledgeGraph"
        },
        "quotations": {
          "$ref": "#/definitions/quotation"
        },
        "relevance": {
          "description": "relevance score for a detected entity. 0.0 .. 1.0 (higher is better)",
          "type": "string"
        },
        "sentiment": {
          "$ref": "#/definitions/sentiment"
        },
        "text": {
          "description": "the detected entity text",
          "type": "string"
        },
        "type": {
          "description": "the detected entity type",
          "type": "string"
        }
      }
    },
    "extracted_date": {
      "properties": {
        "date": {
          "description": "The extracted date in yyyymmddThhmmss format",
          "type": "string"
        },
        "text": {
          "description": "The text of the date as it appears in the source text",
          "type": "string"
        }
      }
    },
    "feed": {
      "properties": {
        "feed": {
          "description": "RSS/ATOM feed link",
          "type": "string"
        }
      }
    },
    "imageKeyword": {
      "properties": {
        "knowledgeGraph": {
          "$ref": "#/definitions/knowledgeGraph"
        },
        "score": {
          "description": "confidence score for the detected image keyword 0.0 .. 1.0 (higher is better)",
          "type": "string"
        },
        "text": {
          "description": "detected keyword",
          "type": "string"
        }
      }
    },
    "keyword": {
      "properties": {
        "knowledgeGraph": {
          "$ref": "#/definitions/knowledgeGraph"
        },
        "relevance": {
          "description": "relevance score for a detected keyword. 0.0 .. 1.0 (higher is better)",
          "type": "string"
        },
        "sentiment": {
          "$ref": "#/definitions/sentiment"
        },
        "text": {
          "description": "the detected keyword text",
          "type": "string"
        }
      }
    },
    "knowledgeGraph": {
      "properties": {
        "typeHierarchy": {
          "description": "path through the knowledge graph to the appropriate keyword",
          "type": "string"
        }
      }
    },
    "microformat": {
      "properties": {
        "fieldData": {
          "description": "microformat field data",
          "type": "string"
        },
        "fieldName": {
          "description": "microformat field name",
          "type": "string"
        }
      }
    },
    "object": {
      "properties": {
        "entity": {
          "$ref": "#/definitions/entity"
        },
        "sentiment": {
          "$ref": "#/definitions/sentiment"
        },
        "sentimentFromSubject": {
          "$ref": "#/definitions/sentimentFromSubject"
        },
        "text": {
          "description": "detected object text",
          "type": "string"
        }
      }
    },
    "publicationDate": {
      "properties": {
        "confident": {
          "description": "will return \"no\" if not confident",
          "type": "string"
        },
        "date": {
          "description": "will be in the form of YYYYMMDDTHHMMSS",
          "type": "string"
        }
      }
    },
    "quotation": {
      "properties": {
        "quotation": {
          "description": "quotation extracted for a particular named entity",
          "type": "string"
        }
      }
    },
    "relation": {
      "properties": {
        "action": {
          "$ref": "#/definitions/action"
        },
        "object": {
          "$ref": "#/definitions/object"
        },
        "subject": {
          "$ref": "#/definitions/subject"
        }
      }
    },
    "result": {
      "properties": {
        "sentiment": {
          "$ref": "#/definitions/sentiment"
        },
        "text": {
          "description": "Excerpt from the source text that corresponds with this result",
          "type": "string"
        }
      }
    },
    "sentiment": {
      "properties": {
        "mixed": {
          "description": "whether sentiment is mixed (both positive and negative) (1 == mixed)",
          "type": "string"
        },
        "score": {
          "description": "sentiment strength (0.0 == neutral)",
          "type": "string"
        },
        "type": {
          "description": "sentiment polarity - \"positive\", \"negative\", or \"neutral\"",
          "type": "string"
        }
      }
    },
    "sentimentFromSubject": {
      "properties": {
        "mixed": {
          "description": "whether sentiment is mixed (both positive and negative) (1 == mixed)",
          "type": "string"
        },
        "score": {
          "description": "the sentiment score (0.0 - 1.0) directed towards the object",
          "type": "string"
        },
        "type": {
          "description": "the sentiment polarity directed towards the object",
          "type": "string"
        }
      }
    },
    "subject": {
      "properties": {
        "entity": {
          "$ref": "#/definitions/entity"
        },
        "sentiment": {
          "$ref": "#/definitions/sentiment"
        },
        "text": {
          "description": "the detected subject text",
          "type": "string"
        }
      }
    },
    "targetedEmotionResult": {
      "properties": {
        "emotions": {
          "$ref": "#/definitions/targetedEmotions"
        },
        "text": {
          "description": "Excerpt from the source text that corresponds with this result",
          "type": "string"
        }
      }
    },
    "targetedEmotions": {
      "properties": {
        "anger": {
          "description": "probability that the text implies anger towards the target",
          "type": "string"
        },
        "disgust": {
          "description": "probability that the text implies disgust towards the target",
          "type": "string"
        },
        "fear": {
          "description": "probability that the text implies fear towards the target",
          "type": "string"
        },
        "joy": {
          "description": "probability that the text implies joy towards the target",
          "type": "string"
        },
        "sadness": {
          "description": "probability that the text implies sadness towards the target",
          "type": "string"
        }
      }
    },
    "typedRelation": {
      "properties": {
        "arguments": {
          "items": {
            "$ref": "#/definitions/typed_relations_argument"
          },
          "type": "array"
        },
        "score": {
          "description": "Confidence score between 0 and 1. The higher the score, the greater the confidence",
          "type": "string"
        },
        "sentence": {
          "description": "Text from the document that contains the relation",
          "type": "string"
        },
        "type": {
          "description": "Type of the detected relation",
          "type": "string"
        }
      }
    },
    "typed_relations_argument": {
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/typed_relations_entity"
          },
          "type": "array"
        },
        "part": {
          "description": "The argument's part in the relation. For example, an award might be the \"first\" part in an \"awardedTo\" relation",
          "type": "string"
        },
        "text": {
          "description": "Text from the input that describes the argument",
          "type": "string"
        }
      }
    },
    "typed_relations_entity": {
      "properties": {
        "id": {
          "description": "Unique identifier for the detected entity",
          "type": "string"
        },
        "text": {
          "description": "Text from the input that describes the entity",
          "type": "string"
        },
        "type": {
          "description": "Entity type",
          "type": "string"
        }
      }
    },
    "verb": {
      "properties": {
        "negated": {
          "description": "whether this action verb was negated in the detected relation - 1 = negated, 0 = not negated",
          "type": "string"
        },
        "tense": {
          "description": "tense of the detected action verb - past, present, future",
          "type": "string"
        },
        "text": {
          "description": "lemmatized base form of the detected action verb",
          "type": "string"
        }
      }
    }
  },
  "host": "gateway-a.watsonplatform.net",
  "info": {
    "description": "The AlchemyLanguage API uses natural language processing technology and machine learning algorithms to extract semantic meta-data from content, such as information on people, places, companies, topics, facts, relationships, authors, and languages.",
    "title": "IBM Alchemy Language",
    "version": "1.0.0",
    "x-tags": ["machine learning"]
  },
  "meta": {
    "created": 1486756139004,
    "revision": 0,
    "version": 0
  },
  "parameters": {
    "anchorDate_formData": {
      "description": "The date to use as \"today\" when interpreting phrases in the text like \"next tuesday.\" Format: `yyyy-mm-dd hh:mm:ss`",
      "in": "formData",
      "name": "anchorDate",
      "required": false,
      "type": "string"
    },
    "anchorDate_query": {
      "description": "The date to use as \"today\" when interpreting phrases in the text like \"next tuesday.\" Format: `yyyy-mm-dd hh:mm:ss`",
      "in": "query",
      "name": "anchorDate",
      "required": false,
      "type": "string"
    },
    "apikey_formData": {
      "description": "Your API key",
      "in": "formData",
      "name": "apikey",
      "required": false,
      "type": "string"
    },
    "apikey_query": {
      "description": "Your API key",
      "in": "query",
      "name": "apikey",
      "required": false,
      "type": "string"
    },
    "content_type": {
      "default": "application/x-www-form-urlencoded",
      "description": "must be 'application/x-www-form-urlencoded'",
      "in": "header",
      "name": "Content-Type",
      "required": true,
      "type": "string"
    },
    "coreference_formData": {
      "description": "Set this to 0 to ignore coreferences (he, she, it, etc) for entities",
      "in": "formData",
      "name": "coreference",
      "required": false,
      "type": "string"
    },
    "coreference_query": {
      "description": "Set this to 0 to ignore coreferences (he, she, it, etc) for entities",
      "in": "query",
      "name": "coreference",
      "required": false,
      "type": "string"
    },
    "cquery_formData": {
      "description": "<a href='http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/alchemylanguage/visual_constraints.shtml' target='_'>Visual constraints query</a> to use when <code>sourceText</code> is set to <code>cquery</code>",
      "in": "formData",
      "name": "cquery",
      "required": false,
      "type": "string"
    },
    "cquery_query": {
      "description": "<a href='http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/alchemylanguage/visual_constraints.shtml' target='_blank'>Visual constraints query</a> to use when <code>sourceText</code> is set to <code>cquery</code>",
      "in": "query",
      "name": "cquery",
      "required": false,
      "type": "string"
    },
    "disambiguate_formData": {
      "description": "Set this to 0 to hide entity disambiguation information in the response",
      "enum": [0, 1],
      "in": "formData",
      "name": "disambiguate",
      "required": false,
      "type": "number"
    },
    "disambiguate_query": {
      "description": "Set this to 0 to hide entity disambiguation information in the response",
      "enum": [0, 1],
      "in": "query",
      "name": "disambiguate",
      "required": false,
      "type": "number"
    },
    "entities_formData": {
      "description": "Set this to 1 to identify entities in detected relations<br><b>This incurs an additional API transaction</b>",
      "enum": [0, 1],
      "in": "formData",
      "name": "entities",
      "required": false,
      "type": "number"
    },
    "entities_query": {
      "description": "Set this to 1 to identify entities in detected relations<br><b>This incurs an additional API transaction</b>",
      "enum": [0, 1],
      "in": "query",
      "name": "entities",
      "required": false,
      "type": "number"
    },
    "extractLinks_formData": {
      "description": "Set this to 1 to include hyperlinks in the extracted web page text",
      "enum": [0, 1],
      "in": "formData",
      "name": "extractLinks",
      "required": false,
      "type": "number"
    },
    "extractLinks_query": {
      "description": "Set this to 1 to include hyperlinks in the extracted web page text",
      "enum": [0, 1],
      "in": "query",
      "name": "extractLinks",
      "required": false,
      "type": "number"
    },
    "extract_formData": {
      "default": "concepts,keywords,entities,taxonomy",
      "description": "Comma separated list of analysis features: <ul><li>authors</li><li>concepts</li><li>dates</li><li>doc-emotion</li><li>entities</li><li>feeds</li><li>keywords</li><li>pub-date</li><li>relations</li><li>typed-rels</li><li>doc-sentiment</li><li>taxonomy</li><li>title</li></ul>",
      "in": "formData",
      "name": "extract",
      "required": false,
      "type": "string"
    },
    "extract_query": {
      "default": "concepts,keywords,entities,taxonomy",
      "description": "Comma separated list of analysis features: <ul><li>authors</li><li>concepts</li><li>dates</li><li>doc-emotion</li><li>entities</li><li>feeds</li><li>keywords</li><li>pub-date</li><li>relations</li><li>typed-rels</li><li>doc-sentiment</li><li>taxonomy</li><li>title</li></ul>",
      "in": "query",
      "name": "extract",
      "required": false,
      "type": "string"
    },
    "html_formData": {
      "description": "HTML content (must be URL encoded)",
      "in": "formData",
      "name": "html",
      "required": true,
      "type": "string"
    },
    "html_query": {
      "description": "HTML content (must be URL encoded)",
      "in": "query",
      "name": "html",
      "required": true,
      "type": "string"
    },
    "jsonp_formData": {
      "description": "JSONP callback (requires 'outputMode' to be set to 'json')",
      "in": "formData",
      "name": "jsonp",
      "required": false,
      "type": "string"
    },
    "jsonp_query": {
      "description": "JSONP callback (requires <code>outputMode</code> to be set to <code>json</code>)",
      "in": "query",
      "name": "jsonp",
      "required": false,
      "type": "string"
    },
    "keywordExtractMode_formData": {
      "description": "keyword extraction mode",
      "enum": ["normal", "strict"],
      "in": "formData",
      "name": "keywordExtractMode",
      "required": false,
      "type": "string"
    },
    "keywordExtractMode_query": {
      "description": "keyword extraction mode",
      "enum": ["normal", "strict"],
      "in": "query",
      "name": "keywordExtractMode",
      "required": false,
      "type": "string"
    },
    "keywords_formData": {
      "description": "Set this to 1 to identify keywords in detected relations<br><b>This incurs an additional API transaction</b>",
      "enum": [0, 1],
      "in": "formData",
      "name": "keywords",
      "required": false,
      "type": "number"
    },
    "keywords_query": {
      "description": "Set this to 1 to identify keywords in detected relations<br><b>This incurs an additional API transaction</b>",
      "enum": [0, 1],
      "in": "query",
      "name": "keywords",
      "required": false,
      "type": "number"
    },
    "knowledgeGraph_formData": {
      "description": "Set to 1 to include knowledge graph information in the results <br><b>Incurs an additional API transaction</b>",
      "enum": [0, 1],
      "in": "formData",
      "name": "knowledgeGraph",
      "required": false,
      "type": "number"
    },
    "knowledgeGraph_formData_combined": {
      "description": "Include knowledge graph information in the results for each applicable function in the combined call. This incurs one additional transaction for each function involved.",
      "enum": [0, 1],
      "in": "formData",
      "name": "knowledgeGraph",
      "required": false,
      "type": "integer"
    },
    "knowledgeGraph_query": {
      "description": "Set to 1 to include knowledge graph information in the results <br><b>Incurs an additional API transaction</b>",
      "enum": [0, 1],
      "in": "query",
      "name": "knowledgeGraph",
      "required": false,
      "type": "integer"
    },
    "knowledgeGraph_query_combined": {
      "description": "Include knowledge graph information in the results for each applicable function in the combined call. This incurs one additional transaction for each function involved.",
      "enum": [0, 1],
      "in": "query",
      "name": "knowledgeGraph",
      "required": false,
      "type": "integer"
    },
    "linkedData_formData": {
      "description": "Set this to 0 to disable linkedData links in the response",
      "enum": [0, 1],
      "in": "formData",
      "name": "linkedData",
      "required": false,
      "type": "integer"
    },
    "linkedData_query": {
      "description": "Set this to 0 to disable linkedData links in the response",
      "enum": [0, 1],
      "in": "query",
      "name": "linkedData",
      "required": false,
      "type": "integer"
    },
    "maxRetrieve_formData": {
      "description": "maximum number of results to return for each extract function",
      "in": "formData",
      "name": "maxRetrieve",
      "required": false,
      "type": "integer"
    },
    "maxRetrieve_formData_concepts": {
      "description": "maximum number of concepts to return (default 8)",
      "in": "formData",
      "name": "maxRetrieve",
      "required": false,
      "type": "integer"
    },
    "maxRetrieve_formData_entities": {
      "description": "maximum number of entities to return (default 50)",
      "in": "formData",
      "name": "maxRetrieve",
      "required": false,
      "type": "integer"
    },
    "maxRetrieve_formData_keywords": {
      "description": "maximum number of keywords to return (default 50)",
      "in": "formData",
      "name": "maxRetrieve",
      "required": false,
      "type": "integer"
    },
    "maxRetrieve_formData_relations": {
      "description": "maximum number of relations to return (default 50, max 100)",
      "in": "formData",
      "name": "maxRetrieve",
      "required": false,
      "type": "integer"
    },
    "maxRetrieve_query": {
      "description": "maximum number of results to return for each extract function",
      "in": "query",
      "name": "maxRetrieve",
      "required": false,
      "type": "integer"
    },
    "maxRetrieve_query_concepts": {
      "description": "maximum number of concepts to return (default 8)",
      "in": "query",
      "name": "maxRetrieve",
      "required": false,
      "type": "integer"
    },
    "maxRetrieve_query_entities": {
      "description": "maximum number of entities to return (default 50)",
      "in": "query",
      "name": "maxRetrieve",
      "required": false,
      "type": "integer"
    },
    "maxRetrieve_query_keywords": {
      "description": "maximum number of keywords to return (default 50)",
      "in": "query",
      "name": "maxRetrieve",
      "required": false,
      "type": "integer"
    },
    "maxRetrieve_query_relations": {
      "description": "maximum number of relations to return (default 50, max 100)",
      "in": "query",
      "name": "maxRetrieve",
      "required": false,
      "type": "integer"
    },
    "metadata_url_formData": {
      "description": "Input here will appear in the url field in the response",
      "in": "formData",
      "name": "url",
      "required": false,
      "type": "string"
    },
    "metadata_url_query": {
      "description": "Input here will appear in the url field in the response",
      "in": "query",
      "name": "url",
      "required": false,
      "type": "string"
    },
    "model_formData": {
      "description": "Unique identifier for a custom model. By default, one of the following models are used depending on the language of the source text:<p><ul><li>en-news</li><li>es-news</li><li>ar-news</li></ul></p>",
      "in": "formData",
      "name": "model",
      "required": false,
      "type": "string"
    },
    "model_query": {
      "description": "Unique identifier for a custom model. By default, one of the following models are used depending on the language of the source text:<p><ul><li>en-news</li><li>es-news</li><li>ar-news</li></ul></p>",
      "in": "query",
      "name": "model",
      "required": false,
      "type": "string"
    },
    "outputMode_formData": {
      "description": "Desired response format (default XML)",
      "enum": ["json", "rdf", "xml"],
      "in": "formData",
      "name": "outputMode",
      "required": false,
      "type": "string"
    },
    "outputMode_query": {
      "description": "Desired response format (default XML)",
      "enum": ["json", "rdf", "xml"],
      "in": "query",
      "name": "outputMode",
      "required": false,
      "type": "string"
    },
    "quotations_formData": {
      "description": "Set this to 1 to return quotations associated with detected entities",
      "enum": [0, 1],
      "in": "formData",
      "name": "quotations",
      "required": false,
      "type": "integer"
    },
    "quotations_query": {
      "description": "Set this to 1 to return quotations associated with detected entities",
      "enum": [0, 1],
      "in": "query",
      "name": "quotations",
      "required": false,
      "type": "integer"
    },
    "requireEntities_formData": {
      "description": "Set this to 1 to only report relations that contain at least one entity",
      "enum": [0, 1],
      "in": "formData",
      "name": "requireEntities",
      "required": false,
      "type": "number"
    },
    "requireEntities_query": {
      "description": "Set this to 1 to only report relations that contain at least one entity",
      "enum": [0, 1],
      "in": "query",
      "name": "requireEntities",
      "required": false,
      "type": "number"
    },
    "sentimentExcludeEntities_formData": {
      "description": "Set this to 1 to exclude entity name text from sentiment analysis (for example, do not analyze \"New\" in \"New York\")",
      "enum": [0, 1],
      "in": "formData",
      "name": "sentimentExcludeEntities",
      "required": false,
      "type": "number"
    },
    "sentimentExcludeEntities_query": {
      "description": "Set this to 1 to exclude entity name text from sentiment analysis (for example, do not analyze \"New\" in \"New York\")",
      "enum": [0, 1],
      "in": "query",
      "name": "sentimentExcludeEntities",
      "required": false,
      "type": "number"
    },
    "sentiment_formData": {
      "description": "Set this to 1 to return sentient information for each detected result<br><b>Incurs an additional API transaction</b>",
      "enum": [0, 1],
      "in": "formData",
      "name": "sentiment",
      "required": false,
      "type": "integer"
    },
    "sentiment_query": {
      "description": "Set this to 1 to return sentiment information for each detected result<br><b>Incurs an additional API transaction</b>",
      "enum": [0, 1],
      "in": "query",
      "name": "sentiment",
      "required": false,
      "type": "integer"
    },
    "showSourceText_formData": {
      "description": "Set this to 1 to include the original source text in the API response (default 0)",
      "enum": [0, 1],
      "in": "formData",
      "name": "showSourceText",
      "required": false,
      "type": "integer"
    },
    "showSourceText_query": {
      "description": "Set this to 1 to include the original source text in the API response (default 0)",
      "enum": [0, 1],
      "in": "query",
      "name": "showSourceText",
      "required": false,
      "type": "integer"
    },
    "sourceText_formData": {
      "description": "Method used to obtain the source text from the HTML file (default cleaned_or_raw)",
      "enum": [
        "cleaned_or_raw (default)",
        "cleaned",
        "raw",
        "xpath",
        "xpath_or_raw",
        "cleaned_and_xpath"
      ],
      "in": "formData",
      "name": "sourceText",
      "required": false,
      "type": "string"
    },
    "sourceText_query": {
      "description": "Method used to obtain the source text from the HTML file (default cleaned_or_raw)",
      "enum": [
        "cleaned_or_raw (default)",
        "cleaned",
        "raw",
        "xpath",
        "xpath_or_raw",
        "cleaned_and_xpath"
      ],
      "in": "query",
      "name": "sourceText",
      "required": false,
      "type": "string"
    },
    "structuredEntities_formData": {
      "description": "Set this to 0 to ignore structured entities, such as Quantity, EmailAddress, TwitterHandle, Hashtag, and IPAddress",
      "enum": [0, 1],
      "in": "formData",
      "name": "structuredEntities",
      "required": false,
      "type": "integer"
    },
    "structuredEntities_query": {
      "description": "Set this to 0 to ignore structured entities, such as Quantity, EmailAddress, TwitterHandle, Hashtag, and IPAddress",
      "enum": [0, 1],
      "in": "query",
      "name": "structuredEntities",
      "required": false,
      "type": "integer"
    },
    "targets_formData": {
      "description": "Pipe delimited list of target phrases (must be URL encoded) - sentiment targeted towards these phrases will be analyzed",
      "in": "formData",
      "name": "targets",
      "required": true,
      "type": "string"
    },
    "targets_formData_emotion": {
      "description": "Pipe delimited list of target phrases (must be URL encoded) - Emotion Analysis will be performed on the phrases in the context of the source text",
      "in": "formData",
      "name": "targets",
      "required": true,
      "type": "string"
    },
    "targets_query": {
      "description": "Pipe delimited list of target phrases (must be URL encoded) - sentiment targeted towards these phrases will be analyzed",
      "in": "query",
      "name": "targets",
      "required": true,
      "type": "string"
    },
    "targets_query_emotion": {
      "description": "Pipe delimited list of target phrases (must be URL encoded) - Emotion Analysis will be performed on these phrases in the context of the source text",
      "in": "query",
      "name": "targets",
      "required": true,
      "type": "string"
    },
    "text_formData": {
      "description": "Text content (must be URL encoded)",
      "in": "formData",
      "name": "text",
      "required": true,
      "type": "string"
    },
    "text_query": {
      "description": "HTML content (must be URL encoded)",
      "in": "query",
      "name": "text",
      "required": true,
      "type": "string"
    },
    "url_formData": {
      "description": "Public facing URL",
      "in": "formData",
      "name": "url",
      "required": true,
      "type": "string"
    },
    "url_query": {
      "description": "Public facing URL",
      "in": "query",
      "name": "url",
      "required": true,
      "type": "string"
    },
    "useMetadata_formData": {
      "description": "Set this to 0 to ignore webpage metadata in the source text",
      "enum": [0, 1],
      "in": "formData",
      "name": "useMetadata",
      "required": false,
      "type": "integer"
    },
    "useMetadata_query": {
      "description": "Set this to 0 to ignore webpage metadata in the source text",
      "enum": [0, 1],
      "in": "query",
      "name": "useMetadata",
      "required": false,
      "type": "integer"
    },
    "xpath_formData": {
      "description": "XPath query to use when <code>sourceText</code> is set to <code>xpath</code>",
      "in": "formData",
      "name": "xpath",
      "required": false,
      "type": "string"
    },
    "xpath_query": {
      "description": "XPath query to use when <code>sourceText</code> is set to <code>xpath</code>",
      "in": "query",
      "name": "xpath",
      "required": false,
      "type": "string"
    }
  },
  "paths": {
    "/html/HTMLExtractDates": {
      "get": {
        "description": "Date extraction identifies dates that are mentioned in text. You can specify an anchor date to accurately interpret dates like \"next tuesday.\"",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/html_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/anchorDate_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Date Extraction Response"
            }
          }
        },
        "summary": "Extracts dates from an HTML document",
        "tags": ["Date Extraction"]
      },
      "post": {
        "description": "Date extraction identifies dates that are mentioned in text. You can specify an anchor date to accurately interpret dates like \"next tuesday.\"",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/html_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/anchorDate_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Date Extraction Response"
            }
          }
        },
        "summary": "Extracts dates from an HTML document",
        "tags": ["Date Extraction"]
      }
    },
    "/html/HTMLGetAuthors": {
      "get": {
        "description": "The HTMLGetAuthors call is utilized to extract author information contained within the specified web page. AlchemyLanguage will process the posted HTML document, looking for author information.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/html_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Authors Response"
            }
          }
        },
        "summary": "Retrieves author information from an HTML document",
        "tags": ["Authors"]
      },
      "post": {
        "description": "The HTMLGetAuthors call is utilized to extract author information contained within the specified web page. AlchemyLanguage will process the posted HTML document, looking for author information.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/html_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Authors Response"
            }
          }
        },
        "summary": "Retrieves author information from an HTML document",
        "tags": ["Authors"]
      }
    },
    "/html/HTMLGetCombinedData": {
      "get": {
        "description": "HTMLGetCombinedData lets you combine multiple AlchemyLanguage HTML operations into a single API call. Concept, keyword, entity, and taxonomy operations are performed by default if no 'extract' parameter is specified.<br><br>Any of the parameters that can be passed in the individual extract methods can be passed in a combined call, but they will apply to any applicable features that are specified in the <code>extract</code> parameter. For example, if you pass <code>knowledgeGraph=1</code> in a combined request for <code>concepts</code>, <code>entities</code>, <code>keywords</code>, and <code>relations</code>, you will add a total of 4 extra transactions to the request.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/html_query"
          },
          {
            "$ref": "#/parameters/extract_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Combined Call Response"
            }
          }
        },
        "summary": "Analyzes HTML with multiple AlchemyLanguage operations",
        "tags": ["Combined Call"]
      },
      "post": {
        "description": "HTMLGetCombinedData lets you combine multiple AlchemyLanguage HTML operations into a single API call. Concept, keyword, entity, and taxonomy operations are performed by default if no 'extract' parameter is specified.<br><br>Any of the parameters that can be passed in the individual extract methods can be passed in a combined call, but they will apply to any applicable features that are specified in the <code>extract</code> parameter. For example, if you pass <code>knowledgeGraph=1</code> in a combined request for <code>concepts</code>, <code>entities</code>, <code>keywords</code>, and <code>relations</code>, you will add a total of 4 extra transactions to the request.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/html_formData"
          },
          {
            "$ref": "#/parameters/extract_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Combined Call Response"
            }
          }
        },
        "summary": "Analyzes HTML with multiple AlchemyLanguage operations",
        "tags": ["Combined Call"]
      }
    },
    "/html/HTMLGetEmotion": {
      "get": {
        "description": "Detects document-level emotion conveyed by the source text. Returns scores for anger, disgust, fear, joy, and sadness.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/html_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Emotion Analysis Response"
            }
          }
        },
        "summary": "Analyzes the emotion conveyed by text from an HTML document",
        "tags": ["Emotion Analysis"]
      },
      "post": {
        "description": "Detects document-level emotion conveyed by the source text. Returns scores for anger, disgust, fear, joy, and sadness.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/html_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Emotion Analysis Response"
            }
          }
        },
        "summary": "Analyzes the emotion conveyed by text from an HTML document",
        "tags": ["Emotion Analysis"]
      }
    },
    "/html/HTMLGetFeedLinks": {
      "get": {
        "description": "Identifies and returns RSS/ATOM feed links found in an HTML document.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Feed Detection Response"
            }
          }
        },
        "summary": "Extracts RSS/Atom feeds from HTML",
        "tags": ["Feed Detection"]
      },
      "post": {
        "description": "Identifies and returns RSS/ATOM feed links found in an HTML document.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Feed Detection Response"
            }
          }
        },
        "summary": "Extracts RSS/Atom feeds from HTML",
        "tags": ["Feed Detection"]
      }
    },
    "/html/HTMLGetMicroformatData": {
      "get": {
        "description": "The HTMLGetMicroformatData call is utilized to extract microformat content from a posted HTML document. AlchemyLanguage will process the posted HTML document, looking for a variety of microformats data structures (hCards, geo, adr, etc.).",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/html_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Microformats Response"
            }
          }
        },
        "summary": "Extracts microformat data from an HTML document",
        "tags": ["Microformats"]
      },
      "post": {
        "description": "The HTMLGetMicroformatData call is utilized to extract microformat content from a posted HTML document. AlchemyLanguage will process the posted HTML document, looking for a variety of microformat data structures (hCards, geo, adr, etc.).",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/html_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Microformats Response"
            }
          }
        },
        "summary": "Extracts microformat data from an HTML document",
        "tags": ["Microformats"]
      }
    },
    "/html/HTMLGetPubDate": {
      "get": {
        "description": "The HTMLGetPubDate call is utilized to extract publication date information contained within the specified web page. AlchemyLanguage will process the posted HTML document, looking for publication date information.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/html_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Publication Date Response"
            }
          }
        },
        "summary": "Retrieves publication date information from an HTML document",
        "tags": ["Publication Date"]
      },
      "post": {
        "description": "The HTMLGetPubDate call is utilized to extract publication date information contained within the specified web page. AlchemyLanguage will process the posted HTML document, looking for publication date information.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/html_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Publication Date Response"
            }
          }
        },
        "summary": "Retrieves publication date information from an HTML document",
        "tags": ["Publication Date"]
      }
    },
    "/html/HTMLGetRankedConcepts": {
      "get": {
        "description": "The HTMLGetRankedConcepts call is utilized to extract a relevancy-ranked list of concept tags for a posted HTML document. AlchemyLanguage will extract text from the posted HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform concept tagging operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/html_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/maxRetrieve_query_concepts"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/linkedData_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Concepts Response"
            }
          }
        },
        "summary": "Returns concepts found in an HTML document",
        "tags": ["Concepts"]
      },
      "post": {
        "description": "The HTMLGetRankedConcepts call is utilized to extract a relevancy-ranked list of concept tags for a posted HTML document. AlchemyLanguage will extract text from the posted HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform concept tagging operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/html_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/maxRetrieve_formData_concepts"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/linkedData_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Concepts Response"
            }
          }
        },
        "summary": "Returns concepts found in an HTML document",
        "tags": ["Concepts"]
      }
    },
    "/html/HTMLGetRankedKeywords": {
      "get": {
        "description": "The HTMLGetRankedKeywords call is used to extract a relevancy-ranked list of topic keywords from a posted HTML document. AlchemyLanguage will extract text from the posted HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform keyword extraction operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/html_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/maxRetrieve_query_keywords"
          },
          {
            "$ref": "#/parameters/sentiment_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Keywords Response"
            }
          }
        },
        "summary": "Extracts keywords from an HTML document",
        "tags": ["Keywords"]
      },
      "post": {
        "description": "The HTMLGetRankedKeywords call is used to extract a relevancy-ranked list of topic keywords from a posted HTML document. AlchemyLanguage will extract text from the posted HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform keyword extraction operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/html_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/maxRetrieve_formData_keywords"
          },
          {
            "$ref": "#/parameters/sentiment_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Keywords Response"
            }
          }
        },
        "summary": "Extracts keywords from an HTML document",
        "tags": ["Keywords"]
      }
    },
    "/html/HTMLGetRankedNamedEntities": {
      "get": {
        "description": "Date extraction identifies dates that are mentioned in text. You can specify an anchor date to accurately interpret dates like \"next tuesday.\"",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/html_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/maxRetrieve_query_entities"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/disambiguate_query"
          },
          {
            "$ref": "#/parameters/linkedData_query"
          },
          {
            "$ref": "#/parameters/coreference_query"
          },
          {
            "$ref": "#/parameters/quotations_query"
          },
          {
            "$ref": "#/parameters/sentiment_query"
          },
          {
            "$ref": "#/parameters/structuredEntities_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Entities Response"
            }
          }
        },
        "summary": "Extracts named entities (people, companies, etc) from an HTML document",
        "tags": ["Entities"]
      },
      "post": {
        "description": "The HTMLGetRankedNamedEntities call is used to extract a grouped, relevancy-ranked list of named entities (people, companies, organizations, etc.) from a posted HTML document. AlchemyLanguage will extract text from the posted HTML document (ignoring navigation links, advertisements, and other undesirable content), and perform entity extraction operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/html_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/maxRetrieve_formData_entities"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/disambiguate_formData"
          },
          {
            "$ref": "#/parameters/linkedData_formData"
          },
          {
            "$ref": "#/parameters/coreference_formData"
          },
          {
            "$ref": "#/parameters/quotations_formData"
          },
          {
            "$ref": "#/parameters/sentiment_formData"
          },
          {
            "$ref": "#/parameters/structuredEntities_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Entities Response"
            }
          }
        },
        "summary": "Extracts named entities (people, companies, etc) from an HTML document",
        "tags": ["Entities"]
      }
    },
    "/html/HTMLGetRankedTaxonomy": {
      "get": {
        "description": "The HTMLGetRankedTaxonomy call is used to categorize a posted HTML document. AlchemyLanguage will extract text and other important content from the posted HTML document structure and perform document categorization operations. AlchemyLanguage will extract text from the posted HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform taxonomy classification operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/html_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Taxonomy Results"
            }
          }
        },
        "summary": "Categorizes the content of an HTML document",
        "tags": ["Taxonomy"]
      },
      "post": {
        "description": "The HTMLGetRankedTaxonomy call is used to categorize a posted HTML document. AlchemyLanguage will extract text and other important content from the posted HTML document structure and perform document categorization operations. AlchemyLanguage will extract text from the posted HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform taxonomy classification operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/html_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Taxonomy Results"
            }
          }
        },
        "summary": "Categorizes the content of an HTML document",
        "tags": ["Taxonomy"]
      }
    },
    "/html/HTMLGetRawText": {
      "get": {
        "description": "The HTMLGetRawText call is utilized to extract all text from a posted web page. AlchemyLanguage will extract text from the posted HTML document structure, including page navigation, advertisements, and other page content. To ignore this content, please use the HTMLGetText call.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/html_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        },
        "summary": "Extracts all text from an HTML document",
        "tags": ["Text Extraction"]
      },
      "post": {
        "description": "The HTMLGetRawText call is utilized to extract all text from a posted web page. AlchemyLanguage will extract text from the posted HTML document structure, including page navigation, advertisements, and other page content. To ignore this content, please use the HTMLGetText call.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/html_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        },
        "summary": "Extracts all text from an HTML document",
        "tags": ["Text Extraction"]
      }
    },
    "/html/HTMLGetRelations": {
      "get": {
        "description": "The HTMLGetRelations call is utilized to extract Subject-Action-Object relations from a posted HTML document. AlchemyLanguage will extract text from the HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform relation extraction operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/html_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/maxRetrieve_formData_relations"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/disambiguate_formData"
          },
          {
            "$ref": "#/parameters/linkedData_formData"
          },
          {
            "$ref": "#/parameters/coreference_formData"
          },
          {
            "$ref": "#/parameters/sentiment_formData"
          },
          {
            "$ref": "#/parameters/keywords_formData"
          },
          {
            "$ref": "#/parameters/entities_formData"
          },
          {
            "$ref": "#/parameters/requireEntities_formData"
          },
          {
            "$ref": "#/parameters/sentimentExcludeEntities_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Relations Response"
            }
          }
        },
        "summary": "Extracts Subject-Action-Object relations from an HTML document",
        "tags": ["Relations"]
      },
      "post": {
        "description": "The HTMLGetRelations call is utilized to extract Subject-Action-Object relations from a posted HTML document. AlchemyLanguage will extract text from the HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform relation extraction operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/html_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/maxRetrieve_query_relations"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/disambiguate_query"
          },
          {
            "$ref": "#/parameters/linkedData_query"
          },
          {
            "$ref": "#/parameters/coreference_query"
          },
          {
            "$ref": "#/parameters/sentiment_query"
          },
          {
            "$ref": "#/parameters/keywords_query"
          },
          {
            "$ref": "#/parameters/entities_query"
          },
          {
            "$ref": "#/parameters/requireEntities_query"
          },
          {
            "$ref": "#/parameters/sentimentExcludeEntities_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_query"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Relations Response"
            }
          }
        },
        "summary": "Extracts Subject-Action-Object relations from an HTML document",
        "tags": ["Relations"]
      }
    },
    "/html/HTMLGetTargetedEmotion": {
      "get": {
        "description": "Searches the source text for specified target phrases and analyzes the emotions that they convey. Returns scores for anger, disgust, fear, joy, and sadness.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/html_query"
          },
          {
            "$ref": "#/parameters/targets_query_emotion"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Targeted Emotion Response"
            }
          }
        },
        "summary": "Analyzes the emotion conveyed by target phrases from an HTML document",
        "tags": ["Emotion Analysis"]
      },
      "post": {
        "description": "Searches the source text for specified target phrases and analyzes the emotions that they convey. Returns scores for anger, disgust, fear, joy, and sadness.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/html_formData"
          },
          {
            "$ref": "#/parameters/targets_formData_emotion"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Targeted Emotion Response"
            }
          }
        },
        "summary": "Analyzes the emotion conveyed by target phrases from an HTML document",
        "tags": ["Emotion Analysis"]
      }
    },
    "/html/HTMLGetTargetedSentiment": {
      "get": {
        "description": "The HTMLGetTargetedSentiment call is utilized to extract positive/negative sentiment targeted towards a specific user-specified target phrase inside the text of a posted HTML document. AlchemyLanguage will extract text from the posted HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform sentiment analysis operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/html_query"
          },
          {
            "$ref": "#/parameters/targets_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Targeted Sentiment Response"
            }
          }
        },
        "summary": "Returns sentiment information for specified phrases in an HTML document",
        "tags": ["Sentiment"]
      },
      "post": {
        "description": "The HTMLGetTargetedSentiment call is utilized to extract positive/negative sentiment targeted towards a specific user-specified target phrase inside the text of a posted HTML document. AlchemyLanguage will extract text from the posted HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform sentiment analysis operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/html_formData"
          },
          {
            "$ref": "#/parameters/targets_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Targeted Sentiment Response"
            }
          }
        },
        "summary": "Returns sentiment information for specified phrases in an HTML document",
        "tags": ["Sentiment"]
      }
    },
    "/html/HTMLGetText": {
      "get": {
        "description": "The HTMLGetText call is utilized to extract the primary page / article text from a posted web page. AlchemyLanguage will extract text from the posted HTML document structure, ignoring page navigation, advertisements, and other undesirable page content.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/html_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/useMetadata_query"
          },
          {
            "$ref": "#/parameters/extractLinks_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        },
        "summary": "Extracts primary text from an HTML document (avoids advertisements and other undesirable content)",
        "tags": ["Text Extraction"]
      },
      "post": {
        "description": "The HTMLGetText call is utilized to extract the primary page / article text from a posted web page. AlchemyLanguage will extract text from the posted HTML document structure, ignoring page navigation, advertisements, and other undesirable page content.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/html_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/useMetadata_formData"
          },
          {
            "$ref": "#/parameters/extractLinks_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        },
        "summary": "Extracts primary text from an HTML document (avoids advertisements and other undesirable content)",
        "tags": ["Text Extraction"]
      }
    },
    "/html/HTMLGetTextSentiment": {
      "get": {
        "description": "The HTMLGetTextSentiment call is utilized to extract positive/negative sentiment from a posted HTML document. AlchemyLanguage will extract text from the posted HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform sentiment analysis operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/html_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Document Sentiment Response"
            }
          }
        },
        "summary": "Returns sentiment information for an HTML document",
        "tags": ["Sentiment"]
      },
      "post": {
        "description": "The HTMLGetTextSentiment call is utilized to extract positive/negative sentiment from a posted HTML document. AlchemyLanguage will extract text from the posted HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform sentiment analysis operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/html_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Document Sentiment Response"
            }
          }
        },
        "summary": "Returns sentiment information for an HTML document",
        "tags": ["Sentiment"]
      }
    },
    "/html/HTMLGetTitle": {
      "get": {
        "description": "The HTMLGetTitle call is utilized to extract title information from a posted web page. The posted HTML document is processed, extracting any title information.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/html_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/useMetadata_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Title"
            }
          }
        },
        "summary": "Extracts title information from an HTML document",
        "tags": ["Title Extraction"]
      },
      "post": {
        "description": "The HTMLGetTitle call is utilized to extract title information from a posted web page. The posted HTML document is processed, extracting any title information.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/html_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/useMetadata_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Title"
            }
          }
        },
        "summary": "Extracts title information from an HTML document",
        "tags": ["Title Extraction"]
      }
    },
    "/html/HTMLGetTypedRelations": {
      "get": {
        "description": "Identifies entities in text and returns different types of relations that exist between them. For example, the entities \"Oscar\" and \"Leonardo DiCaprio\" might be linked by an \"awardedTo\" relation. To tailor results to your domain, you can specify your own custom entities and relations with custom models in Watson Knowledge Studio",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/html_query"
          },
          {
            "$ref": "#/parameters/model_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Typed Relations Response"
            }
          }
        },
        "summary": "Identifies relations between entities found in HTML content",
        "tags": ["Typed Relations"]
      },
      "post": {
        "description": "Identifies entities in text and returns different types of relations that exist between them. For example, the entities \"Oscar\" and \"Leonardo DiCaprio\" might be linked by an \"awardedTo\" relation. To tailor results to your domain, you can specify your own custom entities and relations with custom models in Watson Knowledge Studio",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/html_formData"
          },
          {
            "$ref": "#/parameters/model_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Typed Relations Response"
            }
          }
        },
        "summary": "Identifies relations between entities found in HTML content",
        "tags": ["Typed Relations"]
      }
    },
    "/text/TextExtractDates": {
      "get": {
        "description": "Date extraction identifies dates that are mentioned in text. You can specify an anchor date to accurately interpret dates like \"next tuesday.\"",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/text_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/anchorDate_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Date Extraction Response"
            }
          }
        },
        "summary": "Extracts dates from text",
        "tags": ["Date Extraction"]
      },
      "post": {
        "description": "Date extraction identifies dates that are mentioned in text. You can specify an anchor date to accurately interpret dates like \"next tuesday.\"",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/text_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/anchorDate_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Date Extraction Response"
            }
          }
        },
        "summary": "Extracts dates from text",
        "tags": ["Date Extraction"]
      }
    },
    "/text/TextGetCombinedData": {
      "get": {
        "description": "TextGetCombinedData lets you combine multiple AlchemyLanguage text operations into a single API call. Concept, keyword, entity, and taxonomy operations are performed by default if no 'extract' parameter is specified.<br><br>Any of the parameters that can be passed in the individual extract methods can be passed in a combined call, but they will apply to any applicable features that are specified in the <code>extract</code> parameter. For example, if you pass <code>knowledgeGraph=1</code> in a combined request for <code>concepts</code>, <code>entities</code>, <code>keywords</code>, and <code>relations</code>, you will add a total of 4 extra transactions to the request.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/text_query"
          },
          {
            "$ref": "#/parameters/extract_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Combined Call Response"
            }
          }
        },
        "summary": "Analyzes text with multiple AlchemyLanguage operations",
        "tags": ["Combined Call"]
      },
      "post": {
        "description": "TextGetCombinedData lets you combine multiple AlchemyLanguage text operations into a single API call. Concept, keyword, entity, and taxonomy operations are performed by default if no 'extract' parameter is specified.<br><br>Any of the parameters that can be passed in the individual extract methods can be passed in a combined call, but they will apply to any applicable features that are specified in the <code>extract</code> parameter. For example, if you pass <code>knowledgeGraph=1</code> in a combined request for <code>concepts</code>, <code>entities</code>, <code>keywords</code>, and <code>relations</code>, you will add a total of 4 extra transactions to the request.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/text_formData"
          },
          {
            "$ref": "#/parameters/extract_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Combined Call Response"
            }
          }
        },
        "summary": "Analyzes text with multiple AlchemyLanguage operations",
        "tags": ["Combined Call"]
      }
    },
    "/text/TextGetEmotion": {
      "get": {
        "description": "Detects document-level emotion conveyed by the source text. Returns scores for anger, disgust, fear, joy, and sadness.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/text_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Emotion Analysis Response"
            }
          }
        },
        "summary": "Analyzes the emotion conveyed by text",
        "tags": ["Emotion Analysis"],
        "x-apih-advice": {
          "topJQueryAjaxParams": null,
          "topPayloadParams": [
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117"
                },
                {
                  "sourceId": 2,
                  "url": "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
                },
                {
                  "sourceId": 3,
                  "url": "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81"
                }
              ],
              "count": 14,
              "paramName": "outputMode",
              "paramValues": [
                {
                  "count": 14,
                  "source": [
                    "https://github.com/nbenavi/BirdTalk/blob/ffd4cf82e4685a3e7f5176dfa8295501a00fabdf/sentiment_extension/background.js#L55",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L75",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L63",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L81",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L99",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L136",
                    "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L73",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L85",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L63",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L99",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L136"
                  ],
                  "value": "json"
                }
              ]
            },
            {
              "bestSources": null,
              "count": 13,
              "paramName": "apikey",
              "paramValues": [
                {
                  "count": 10,
                  "source": [
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L63",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L81",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L99",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L136",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L63",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L99",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L136"
                  ],
                  "value": "<Hiding desensitized value>"
                },
                {
                  "count": 2,
                  "source": [
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L75",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L85"
                  ],
                  "value": "<Hiding desensitized value>"
                },
                {
                  "count": 1,
                  "source": [
                    "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L73"
                  ],
                  "value": "<Hiding desensitized value>"
                }
              ]
            }
          ],
          "topQueryParams": [
            {
              "bestSources": null,
              "count": 2,
              "paramName": "apikey",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/nbenavi/BirdTalk/blob/ffd4cf82e4685a3e7f5176dfa8295501a00fabdf/sentiment_extension/background.js#L55"
                  ],
                  "value": "<Hiding desensitized value>"
                }
              ]
            },
            {
              "bestSources": null,
              "count": 1,
              "paramName": "outputMode",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/Dielentheis/huEmotions/blob/32feca11f4091c50d2dfe5ef58a84253c19575c9/js/index.js#L83"
                  ],
                  "value": "json"
                }
              ]
            },
            {
              "bestSources": null,
              "count": 1,
              "paramName": "text",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/Dielentheis/huEmotions/blob/32feca11f4091c50d2dfe5ef58a84253c19575c9/js/index.js#L83"
                  ],
                  "value": ""
                }
              ]
            }
          ],
          "topResponseFields": [
            {
              "bestSources": [
                {
                  "sourceId": 3,
                  "url": "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81"
                }
              ],
              "count": 5,
              "fieldName": "concepts",
              "source": [
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L98",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L81",
                "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L95",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L108",
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81"
              ],
              "total": 27
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117"
                },
                {
                  "sourceId": 2,
                  "url": "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
                }
              ],
              "count": 5,
              "fieldName": "docEmotions.anger",
              "source": [
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L142",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117",
                "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L139",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L152",
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
              ],
              "total": 27
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117"
                },
                {
                  "sourceId": 2,
                  "url": "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
                }
              ],
              "count": 5,
              "fieldName": "docEmotions.disgust",
              "source": [
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L142",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117",
                "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L139",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L152",
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
              ],
              "total": 27
            }
          ],
          "totalUsageCount": 27
        }
      },
      "post": {
        "description": "Detects document-level emotion conveyed by the source text. Returns scores for anger, disgust, fear, joy, and sadness.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/text_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Emotion Analysis Response"
            }
          }
        },
        "summary": "Analyzes the emotion conveyed by text",
        "tags": ["Emotion Analysis"]
      }
    },
    "/text/TextGetLanguage": {
      "get": {
        "description": "The TextGetLanguage call is utilized to detect the language utilized within a posted text document.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/text_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Language Response"
            }
          }
        },
        "summary": "Detects the language of a text document",
        "tags": ["Language"]
      },
      "post": {
        "description": "TThe TextGetLanguage call is utilized to detect the language utilized within a posted text document.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/text_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Language Response"
            }
          }
        },
        "summary": "Detects the language of a text document",
        "tags": ["Language"]
      }
    },
    "/text/TextGetRankedConcepts": {
      "get": {
        "description": "The TextGetRankedConcepts call is utilized to extract a relevancy-ranked list of concept tags from within a posted text document.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/text_query"
          },
          {
            "$ref": "#/parameters/maxRetrieve_query_concepts"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/linkedData_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Concepts Response"
            }
          }
        },
        "summary": "Returns concepts found in a text document",
        "tags": ["Concepts"],
        "x-apih-advice": {
          "topJQueryAjaxParams": null,
          "topPayloadParams": [
            {
              "bestSources": null,
              "count": 13,
              "paramName": "apikey",
              "paramValues": [
                {
                  "count": 10,
                  "source": [
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L63",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L81",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L99",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L136",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L63",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L99",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L136"
                  ],
                  "value": "<Hiding desensitized value>"
                },
                {
                  "count": 2,
                  "source": [
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L75",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L85"
                  ],
                  "value": "<Hiding desensitized value>"
                },
                {
                  "count": 1,
                  "source": [
                    "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L73"
                  ],
                  "value": "<Hiding desensitized value>"
                }
              ]
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117"
                },
                {
                  "sourceId": 2,
                  "url": "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
                },
                {
                  "sourceId": 3,
                  "url": "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81"
                }
              ],
              "count": 13,
              "paramName": "outputMode",
              "paramValues": [
                {
                  "count": 13,
                  "source": [
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L75",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L63",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L81",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L99",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L136",
                    "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L73",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L85",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L63",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L99",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L136"
                  ],
                  "value": "json"
                }
              ]
            }
          ],
          "topQueryParams": null,
          "topResponseFields": [
            {
              "bestSources": [
                {
                  "sourceId": 3,
                  "url": "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81"
                }
              ],
              "count": 5,
              "fieldName": "concepts",
              "source": [
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L98",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L81",
                "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L95",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L108",
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81"
              ],
              "total": 25
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117"
                },
                {
                  "sourceId": 2,
                  "url": "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
                }
              ],
              "count": 5,
              "fieldName": "docEmotions.anger",
              "source": [
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L142",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117",
                "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L139",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L152",
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
              ],
              "total": 25
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117"
                },
                {
                  "sourceId": 2,
                  "url": "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
                }
              ],
              "count": 5,
              "fieldName": "docEmotions.disgust",
              "source": [
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L142",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117",
                "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L139",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L152",
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
              ],
              "total": 25
            }
          ],
          "totalUsageCount": 25
        }
      },
      "post": {
        "description": "The TextGetRankedConcepts call is utilized to extract a relevancy-ranked list of concept tags from within a posted text document.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/text_formData"
          },
          {
            "$ref": "#/parameters/maxRetrieve_formData_concepts"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/linkedData_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Concepts Response"
            }
          }
        },
        "summary": "Returns concepts found in a text document",
        "tags": ["Concepts"]
      }
    },
    "/text/TextGetRankedKeywords": {
      "get": {
        "description": "The TextGetRankedKeywords call is utilized to extract a relevancy-ranked list of topic keywords from within a posted text document.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/text_query"
          },
          {
            "$ref": "#/parameters/maxRetrieve_formData_keywords"
          },
          {
            "$ref": "#/parameters/sentiment_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Keywords Response"
            }
          }
        },
        "summary": "Extracts keywords from a text document",
        "tags": ["Keywords"],
        "x-apih-advice": {
          "topJQueryAjaxParams": null,
          "topPayloadParams": [
            {
              "bestSources": null,
              "count": 13,
              "paramName": "apikey",
              "paramValues": [
                {
                  "count": 10,
                  "source": [
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L63",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L81",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L99",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L136",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L63",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L99",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L136"
                  ],
                  "value": "<Hiding desensitized value>"
                },
                {
                  "count": 2,
                  "source": [
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L75",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L85"
                  ],
                  "value": "<Hiding desensitized value>"
                },
                {
                  "count": 1,
                  "source": [
                    "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L73"
                  ],
                  "value": "<Hiding desensitized value>"
                }
              ]
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117"
                },
                {
                  "sourceId": 2,
                  "url": "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
                },
                {
                  "sourceId": 3,
                  "url": "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81"
                }
              ],
              "count": 13,
              "paramName": "outputMode",
              "paramValues": [
                {
                  "count": 13,
                  "source": [
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L75",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L63",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L81",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L99",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L136",
                    "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L73",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L85",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L63",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L99",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L136"
                  ],
                  "value": "json"
                }
              ]
            }
          ],
          "topQueryParams": null,
          "topResponseFields": [
            {
              "bestSources": [
                {
                  "sourceId": 3,
                  "url": "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81"
                }
              ],
              "count": 5,
              "fieldName": "concepts",
              "source": [
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L98",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L81",
                "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L95",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L108",
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81"
              ],
              "total": 25
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117"
                },
                {
                  "sourceId": 2,
                  "url": "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
                }
              ],
              "count": 5,
              "fieldName": "docEmotions.anger",
              "source": [
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L142",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117",
                "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L139",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L152",
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
              ],
              "total": 25
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117"
                },
                {
                  "sourceId": 2,
                  "url": "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
                }
              ],
              "count": 5,
              "fieldName": "docEmotions.disgust",
              "source": [
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L142",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117",
                "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L139",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L152",
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
              ],
              "total": 25
            }
          ],
          "totalUsageCount": 25
        }
      },
      "post": {
        "description": "The TextGetRankedKeywords call is utilized to extract a relevancy-ranked list of topic keywords from within a posted text document.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/text_formData"
          },
          {
            "$ref": "#/parameters/maxRetrieve_formData_keywords"
          },
          {
            "$ref": "#/parameters/sentiment_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Keywords Response"
            }
          }
        },
        "summary": "Extracts keywords from a text document",
        "tags": ["Keywords"]
      }
    },
    "/text/TextGetRankedNamedEntities": {
      "get": {
        "description": "The TextGetRankedNamedEntities call is utilized to extract a grouped, ranked list of named entities (people, companies, organizations, etc.) from within a posted text document.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/text_query"
          },
          {
            "$ref": "#/parameters/maxRetrieve_query_entities"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/disambiguate_query"
          },
          {
            "$ref": "#/parameters/linkedData_query"
          },
          {
            "$ref": "#/parameters/coreference_query"
          },
          {
            "$ref": "#/parameters/quotations_query"
          },
          {
            "$ref": "#/parameters/sentiment_query"
          },
          {
            "$ref": "#/parameters/structuredEntities_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Entities Response"
            }
          }
        },
        "summary": "Extracts named entities (people, companies, etc) from a text document",
        "tags": ["Entities"]
      },
      "post": {
        "description": "The TextGetRankedNamedEntities call is utilized to extract a grouped, ranked list of named entities (people, companies, organizations, etc.) from within a posted text document.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/text_formData"
          },
          {
            "$ref": "#/parameters/maxRetrieve_formData_entities"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/disambiguate_formData"
          },
          {
            "$ref": "#/parameters/linkedData_formData"
          },
          {
            "$ref": "#/parameters/coreference_formData"
          },
          {
            "$ref": "#/parameters/quotations_formData"
          },
          {
            "$ref": "#/parameters/sentiment_formData"
          },
          {
            "$ref": "#/parameters/structuredEntities_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Entities Response"
            }
          }
        },
        "summary": "Extracts named entities (people, companies, etc) from a text document",
        "tags": ["Entities"]
      }
    },
    "/text/TextGetRankedTaxonomy": {
      "get": {
        "description": "The TextGetRankedTaxonomy call is used to categorize a posted text document.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/text_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Taxonomy Results"
            }
          }
        },
        "summary": "Categorizes the content of a text document",
        "tags": ["Taxonomy"],
        "x-apih-advice": {
          "topJQueryAjaxParams": null,
          "topPayloadParams": [
            {
              "bestSources": null,
              "count": 13,
              "paramName": "apikey",
              "paramValues": [
                {
                  "count": 10,
                  "source": [
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L63",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L81",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L99",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L136",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L63",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L99",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L136"
                  ],
                  "value": "<Hiding desensitized value>"
                },
                {
                  "count": 2,
                  "source": [
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L75",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L85"
                  ],
                  "value": "<Hiding desensitized value>"
                },
                {
                  "count": 1,
                  "source": [
                    "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L73"
                  ],
                  "value": "<Hiding desensitized value>"
                }
              ]
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117"
                },
                {
                  "sourceId": 2,
                  "url": "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
                },
                {
                  "sourceId": 3,
                  "url": "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81"
                }
              ],
              "count": 13,
              "paramName": "outputMode",
              "paramValues": [
                {
                  "count": 13,
                  "source": [
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L75",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L63",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L81",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L99",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L136",
                    "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L73",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L85",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L63",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L99",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L136"
                  ],
                  "value": "json"
                }
              ]
            }
          ],
          "topQueryParams": null,
          "topResponseFields": [
            {
              "bestSources": [
                {
                  "sourceId": 3,
                  "url": "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81"
                }
              ],
              "count": 5,
              "fieldName": "concepts",
              "source": [
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L98",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L81",
                "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L95",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L108",
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81"
              ],
              "total": 25
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117"
                },
                {
                  "sourceId": 2,
                  "url": "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
                }
              ],
              "count": 5,
              "fieldName": "docEmotions.anger",
              "source": [
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L142",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117",
                "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L139",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L152",
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
              ],
              "total": 25
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117"
                },
                {
                  "sourceId": 2,
                  "url": "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
                }
              ],
              "count": 5,
              "fieldName": "docEmotions.disgust",
              "source": [
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L142",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117",
                "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L139",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L152",
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
              ],
              "total": 25
            }
          ],
          "totalUsageCount": 25
        }
      },
      "post": {
        "description": "The TextGetRankedTaxonomy call is used to categorize a posted text document.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/text_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Taxonomy Results"
            }
          }
        },
        "summary": "Categorizes the content of a text document",
        "tags": ["Taxonomy"]
      }
    },
    "/text/TextGetRelations": {
      "get": {
        "description": "The TextGetRelations call is utilized to extract Subject-Action-Object relations from a given text document.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/text_query"
          },
          {
            "$ref": "#/parameters/maxRetrieve_query_relations"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/disambiguate_query"
          },
          {
            "$ref": "#/parameters/linkedData_query"
          },
          {
            "$ref": "#/parameters/coreference_query"
          },
          {
            "$ref": "#/parameters/sentiment_query"
          },
          {
            "$ref": "#/parameters/keywords_query"
          },
          {
            "$ref": "#/parameters/entities_query"
          },
          {
            "$ref": "#/parameters/requireEntities_query"
          },
          {
            "$ref": "#/parameters/sentimentExcludeEntities_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Relations Response"
            }
          }
        },
        "summary": "Extracts Subject-Action-Object relations from a text document",
        "tags": ["Relations"]
      },
      "post": {
        "description": "The TextGetRelations call is utilized to extract Subject-Action-Object relations from a given text document.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/text_formData"
          },
          {
            "$ref": "#/parameters/maxRetrieve_formData_relations"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/disambiguate_formData"
          },
          {
            "$ref": "#/parameters/linkedData_formData"
          },
          {
            "$ref": "#/parameters/coreference_formData"
          },
          {
            "$ref": "#/parameters/sentiment_formData"
          },
          {
            "$ref": "#/parameters/keywords_formData"
          },
          {
            "$ref": "#/parameters/entities_formData"
          },
          {
            "$ref": "#/parameters/requireEntities_formData"
          },
          {
            "$ref": "#/parameters/sentimentExcludeEntities_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Relations Response"
            }
          }
        },
        "summary": "Extracts Subject-Action-Object relations from a text document",
        "tags": ["Relations"]
      }
    },
    "/text/TextGetTargetedEmotion": {
      "get": {
        "description": "Searches the source text for specified target phrases and analyzes the emotions that they convey. Returns scores for anger, disgust, fear, joy, and sadness.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/text_query"
          },
          {
            "$ref": "#/parameters/targets_query_emotion"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Targeted Emotion Response"
            }
          }
        },
        "summary": "Analyzes the emotion conveyed by target phrases from text",
        "tags": ["Emotion Analysis"]
      },
      "post": {
        "description": "Searches the source text for specified target phrases and analyzes the emotions that they convey. Returns scores for anger, disgust, fear, joy, and sadness.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/text_formData"
          },
          {
            "$ref": "#/parameters/targets_formData_emotion"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Targeted Emotion Response"
            }
          }
        },
        "summary": "Analyzes the emotion conveyed by target phrases from text",
        "tags": ["Emotion Analysis"]
      }
    },
    "/text/TextGetTargetedSentiment": {
      "get": {
        "description": "The TextGetTargetedSentiment call is utilized to extract positive/negative sentiment targeted towards a user-specified phrase within a posted text document.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/text_query"
          },
          {
            "$ref": "#/parameters/targets_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Targeted Sentiment Response"
            }
          }
        },
        "summary": "Returns sentiment information for specified phrases in a text document",
        "tags": ["Sentiment"],
        "x-apih-advice": {
          "topJQueryAjaxParams": null,
          "topPayloadParams": [
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/Dirichi/SimpleSoccerManager/blob/aa723f9e184c0be695449c9a0494e4f916d89c11/public/js/script.js#L407"
                },
                {
                  "sourceId": 2,
                  "url": "https://github.com/Dirichi/SimpleSoccerManager/blob/aa723f9e184c0be695449c9a0494e4f916d89c11/public/js/main.js#L84"
                }
              ],
              "count": 2,
              "paramName": "apikey",
              "paramValues": [
                {
                  "count": 2,
                  "source": [
                    "https://github.com/Dirichi/SimpleSoccerManager/blob/aa723f9e184c0be695449c9a0494e4f916d89c11/public/js/script.js#L407",
                    "https://github.com/Dirichi/SimpleSoccerManager/blob/aa723f9e184c0be695449c9a0494e4f916d89c11/public/js/main.js#L84"
                  ],
                  "value": "<Hiding desensitized value>"
                }
              ]
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/Dirichi/SimpleSoccerManager/blob/aa723f9e184c0be695449c9a0494e4f916d89c11/public/js/script.js#L407"
                },
                {
                  "sourceId": 2,
                  "url": "https://github.com/Dirichi/SimpleSoccerManager/blob/aa723f9e184c0be695449c9a0494e4f916d89c11/public/js/main.js#L84"
                }
              ],
              "count": 2,
              "paramName": "outputMode",
              "paramValues": [
                {
                  "count": 2,
                  "source": [
                    "https://github.com/Dirichi/SimpleSoccerManager/blob/aa723f9e184c0be695449c9a0494e4f916d89c11/public/js/script.js#L407",
                    "https://github.com/Dirichi/SimpleSoccerManager/blob/aa723f9e184c0be695449c9a0494e4f916d89c11/public/js/main.js#L84"
                  ],
                  "value": "json"
                }
              ]
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/Dirichi/SimpleSoccerManager/blob/aa723f9e184c0be695449c9a0494e4f916d89c11/public/js/script.js#L407"
                },
                {
                  "sourceId": 2,
                  "url": "https://github.com/Dirichi/SimpleSoccerManager/blob/aa723f9e184c0be695449c9a0494e4f916d89c11/public/js/main.js#L84"
                }
              ],
              "count": 2,
              "paramName": "targets",
              "paramValues": [
                {
                  "count": 2,
                  "source": [
                    "https://github.com/Dirichi/SimpleSoccerManager/blob/aa723f9e184c0be695449c9a0494e4f916d89c11/public/js/script.js#L407",
                    "https://github.com/Dirichi/SimpleSoccerManager/blob/aa723f9e184c0be695449c9a0494e4f916d89c11/public/js/main.js#L84"
                  ],
                  "value": "team"
                }
              ]
            }
          ],
          "topQueryParams": null,
          "topResponseFields": [
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/Dirichi/SimpleSoccerManager/blob/aa723f9e184c0be695449c9a0494e4f916d89c11/public/js/script.js#L407"
                },
                {
                  "sourceId": 2,
                  "url": "https://github.com/Dirichi/SimpleSoccerManager/blob/aa723f9e184c0be695449c9a0494e4f916d89c11/public/js/main.js#L84"
                }
              ],
              "count": 2,
              "fieldName": "results.0.sentiment.score",
              "source": [
                "https://github.com/Dirichi/SimpleSoccerManager/blob/aa723f9e184c0be695449c9a0494e4f916d89c11/public/js/script.js#L407",
                "https://github.com/Dirichi/SimpleSoccerManager/blob/aa723f9e184c0be695449c9a0494e4f916d89c11/public/js/main.js#L84"
              ],
              "total": 2
            }
          ],
          "totalUsageCount": 2
        }
      },
      "post": {
        "description": "The TextGetTargetedSentiment call is utilized to extract positive/negative sentiment targeted towards a user-specified phrase within a posted text document.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/text_formData"
          },
          {
            "$ref": "#/parameters/targets_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Targeted Sentiment Response"
            }
          }
        },
        "summary": "Returns sentiment information for specified phrases in a text document",
        "tags": ["Sentiment"]
      }
    },
    "/text/TextGetTextSentiment": {
      "get": {
        "description": "The TextGetTextSentiment call is utilized to extract positive/negative sentiment from within a posted text document.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/text_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Document Sentiment Response"
            }
          }
        },
        "summary": "Returns sentiment information for a text document",
        "tags": ["Sentiment"],
        "x-apih-advice": {
          "topJQueryAjaxParams": null,
          "topPayloadParams": [
            {
              "bestSources": null,
              "count": 14,
              "paramName": "apikey",
              "paramValues": [
                {
                  "count": 10,
                  "source": [
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L63",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L81",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L99",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L136",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L63",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L99",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L136"
                  ],
                  "value": "<Hiding desensitized value>"
                },
                {
                  "count": 2,
                  "source": [
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L75",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L85"
                  ],
                  "value": "<Hiding desensitized value>"
                },
                {
                  "count": 1,
                  "source": [
                    "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L73"
                  ],
                  "value": "<Hiding desensitized value>"
                },
                {
                  "count": 1,
                  "source": [
                    "https://github.com/YuhuiDai/Dream-Journal-Entry/blob/7487aa94bc51943d660421759c8220422d6b7b86/main.js#L6"
                  ],
                  "value": "<Hiding desensitized value>"
                }
              ]
            },
            {
              "bestSources": [
                {
                  "sourceId": 2,
                  "url": "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117"
                },
                {
                  "sourceId": 3,
                  "url": "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L136"
                }
              ],
              "count": 14,
              "paramName": "outputMode",
              "paramValues": [
                {
                  "count": 14,
                  "source": [
                    "https://github.com/YuhuiDai/Dream-Journal-Entry/blob/7487aa94bc51943d660421759c8220422d6b7b86/main.js#L6",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L75",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L63",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L81",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L99",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L136",
                    "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L73",
                    "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L85",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L63",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L99",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117",
                    "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L136"
                  ],
                  "value": "json"
                }
              ]
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/desaiuditd/incognitech-watson-chat/blob/25e46014fd7f91e6a4328a69892281a58d9ce80f/public/src/bot.js#L143"
                }
              ],
              "count": 1,
              "paramName": "paramater1",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/desaiuditd/incognitech-watson-chat/blob/25e46014fd7f91e6a4328a69892281a58d9ce80f/public/src/bot.js#L143"
                  ],
                  "value": "value"
                }
              ]
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/desaiuditd/incognitech-watson-chat/blob/25e46014fd7f91e6a4328a69892281a58d9ce80f/public/src/bot.js#L143"
                }
              ],
              "count": 1,
              "paramName": "parameter2",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/desaiuditd/incognitech-watson-chat/blob/25e46014fd7f91e6a4328a69892281a58d9ce80f/public/src/bot.js#L143"
                  ],
                  "value": "another value"
                }
              ]
            }
          ],
          "topQueryParams": [
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/desaiuditd/incognitech-watson-chat/blob/25e46014fd7f91e6a4328a69892281a58d9ce80f/public/src/bot.js#L143"
                }
              ],
              "count": 2,
              "paramName": "apikey",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/desaiuditd/incognitech-watson-chat/blob/25e46014fd7f91e6a4328a69892281a58d9ce80f/public/src/bot.js#L143"
                  ],
                  "value": "<Hiding desensitized value>"
                }
              ]
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/desaiuditd/incognitech-watson-chat/blob/25e46014fd7f91e6a4328a69892281a58d9ce80f/public/src/bot.js#L143"
                }
              ],
              "count": 2,
              "paramName": "outputMode",
              "paramValues": [
                {
                  "count": 2,
                  "source": [
                    "https://github.com/desaiuditd/incognitech-watson-chat/blob/25e46014fd7f91e6a4328a69892281a58d9ce80f/public/src/bot.js#L143",
                    "https://github.com/Dielentheis/huEmotions/blob/32feca11f4091c50d2dfe5ef58a84253c19575c9/js/index.js#L94"
                  ],
                  "value": "json"
                }
              ]
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/desaiuditd/incognitech-watson-chat/blob/25e46014fd7f91e6a4328a69892281a58d9ce80f/public/src/bot.js#L143"
                }
              ],
              "count": 2,
              "paramName": "text",
              "paramValues": [
                {
                  "count": 2,
                  "source": [
                    "https://github.com/desaiuditd/incognitech-watson-chat/blob/25e46014fd7f91e6a4328a69892281a58d9ce80f/public/src/bot.js#L143",
                    "https://github.com/Dielentheis/huEmotions/blob/32feca11f4091c50d2dfe5ef58a84253c19575c9/js/index.js#L94"
                  ],
                  "value": ""
                }
              ]
            }
          ],
          "topResponseFields": [
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/desaiuditd/incognitech-watson-chat/blob/25e46014fd7f91e6a4328a69892281a58d9ce80f/public/src/bot.js#L143"
                },
                {
                  "sourceId": 3,
                  "url": "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L136"
                }
              ],
              "count": 7,
              "fieldName": "docSentiment.score",
              "source": [
                "https://github.com/desaiuditd/incognitech-watson-chat/blob/25e46014fd7f91e6a4328a69892281a58d9ce80f/public/src/bot.js#L143",
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L161",
                "https://github.com/Dielentheis/huEmotions/blob/32feca11f4091c50d2dfe5ef58a84253c19575c9/js/index.js#L94",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L136",
                "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L158",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L171",
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L136"
              ],
              "total": 28
            },
            {
              "bestSources": null,
              "count": 5,
              "fieldName": "concepts",
              "source": [
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L98",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L81",
                "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L95",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L108",
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L81"
              ],
              "total": 28
            },
            {
              "bestSources": [
                {
                  "sourceId": 2,
                  "url": "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117"
                }
              ],
              "count": 5,
              "fieldName": "docEmotions.anger",
              "source": [
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js#L142",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/summary.js#L117",
                "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js#L139",
                "https://github.com/SongHia/today-i-learned/blob/f6032070edcfbeb9941ed56252515955b4f976ce/public/js/remember.js#L152",
                "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js#L117"
              ],
              "total": 28
            }
          ],
          "totalUsageCount": 28
        }
      },
      "post": {
        "description": "The TextGetTextSentiment call is utilized to extract positive/negative sentiment from within a posted text document.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/text_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Document Sentiment Response"
            }
          }
        },
        "summary": "Returns sentiment information for a text document",
        "tags": ["Sentiment"]
      }
    },
    "/text/TextGetTypedRelations": {
      "get": {
        "description": "Identifies entities in text and returns different types of relations that exist between them. For example, the entities \"Oscar\" and \"Leonardo DiCaprio\" might be linked by an \"awardedTo\" relation. To tailor results to your domain, you can specify your own custom entities and relations with custom models in Watson Knowledge Studio",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/text_query"
          },
          {
            "$ref": "#/parameters/model_query"
          },
          {
            "$ref": "#/parameters/metadata_url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Typed Relations Response"
            }
          }
        },
        "summary": "Identifies relations between entities found in text",
        "tags": ["Typed Relations"]
      },
      "post": {
        "description": "Identifies entities in text and returns different types of relations that exist between them. For example, the entities \"Oscar\" and \"Leonardo DiCaprio\" might be linked by an \"awardedTo\" relation. To tailor results to your domain, you can specify your own custom entities and relations with custom models in Watson Knowledge Studio",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/text_formData"
          },
          {
            "$ref": "#/parameters/model_formData"
          },
          {
            "$ref": "#/parameters/metadata_url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Typed Relations Response"
            }
          }
        },
        "summary": "Identifies relations between entities found in text",
        "tags": ["Typed Relations"]
      }
    },
    "/url/URLExtractDates": {
      "get": {
        "description": "Date extraction identifies dates that are mentioned in text. You can specify an anchor date to accurately interpret dates like \"next tuesday.\"",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/anchorDate_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Date Extraction Response"
            }
          }
        },
        "summary": "Extracts dates from the text on a webpage",
        "tags": ["Date Extraction"]
      },
      "post": {
        "description": "Date extraction identifies dates that are mentioned in text. You can specify an anchor date to accurately interpret dates like \"next tuesday.\"",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/anchorDate_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Date Extraction Response"
            }
          }
        },
        "summary": "Extracts dates from the text on a webpage",
        "tags": ["Date Extraction"]
      }
    },
    "/url/URLGetAuthors": {
      "get": {
        "description": "The URLGetAuthors call is utilized to extract author information contained within the specified web page. AlchemyLanguage will download the requested URL, process the retrieved HTML document, looking for author information.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Authors Response"
            }
          }
        },
        "summary": "Retrieves author information from a web page",
        "tags": ["Authors"],
        "x-apih-advice": {
          "topJQueryAjaxParams": null,
          "topPayloadParams": [
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/mingyli/calhacks-ethos/blob/c7de7aa088571f9b20f78c8d2cf004d3cde708d3/src/popup.js#L23"
                }
              ],
              "count": 1,
              "paramName": "outputMode",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/mingyli/calhacks-ethos/blob/c7de7aa088571f9b20f78c8d2cf004d3cde708d3/src/popup.js#L23"
                  ],
                  "value": "json"
                }
              ]
            }
          ],
          "topQueryParams": null,
          "topResponseFields": [
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/mingyli/calhacks-ethos/blob/c7de7aa088571f9b20f78c8d2cf004d3cde708d3/src/popup.js#L23"
                }
              ],
              "count": 1,
              "fieldName": "authors.names.0",
              "source": [
                "https://github.com/mingyli/calhacks-ethos/blob/c7de7aa088571f9b20f78c8d2cf004d3cde708d3/src/popup.js#L23"
              ],
              "total": 1
            }
          ],
          "totalUsageCount": 1
        }
      },
      "post": {
        "description": "The URLGetAuthors call is utilized to extract author information contained within the specified web page. AlchemyLanguage will download the requested URL, process the retrieved HTML document, looking for author information.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Authors Response"
            }
          }
        },
        "summary": "Retrieves author information from a web page",
        "tags": ["Authors"]
      }
    },
    "/url/URLGetCombinedData": {
      "get": {
        "description": "URLGetCombinedData lets you combine multiple AlchemyLanguage webpage operations into a single API call. Concept, keyword, entity, and taxonomy operations are performed by default if no 'extract' parameter is specified.<br><br>Any of the parameters that can be passed in the individual extract methods can be passed in a combined call, but they will apply to any applicable features that are specified in the <code>extract</code> parameter. For example, if you pass <code>knowledgeGraph=1</code> in a combined request for <code>concepts</code>, <code>entities</code>, <code>keywords</code>, and <code>relations</code>, you will add a total of 4 extra transactions to the request.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/extract_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Combined Call Response"
            }
          }
        },
        "summary": "Analyzes a web page with multiple AlchemyLanguage operations",
        "tags": ["Combined Call"],
        "x-apih-advice": {
          "topJQueryAjaxParams": null,
          "topPayloadParams": null,
          "topQueryParams": [
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/jeffrohlman/jeffrohlman.github.io/blob/0f0a44b99e1789732d6970ea914086abb81db10d/index.js#L14"
                }
              ],
              "count": 1,
              "paramName": "apikey",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/jeffrohlman/jeffrohlman.github.io/blob/0f0a44b99e1789732d6970ea914086abb81db10d/index.js#L14"
                  ],
                  "value": "<Hiding desensitized value>"
                }
              ]
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/jeffrohlman/jeffrohlman.github.io/blob/0f0a44b99e1789732d6970ea914086abb81db10d/index.js#L14"
                }
              ],
              "count": 1,
              "paramName": "extract",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/jeffrohlman/jeffrohlman.github.io/blob/0f0a44b99e1789732d6970ea914086abb81db10d/index.js#L14"
                  ],
                  "value": "keywords,concepts,title,authors"
                }
              ]
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/jeffrohlman/jeffrohlman.github.io/blob/0f0a44b99e1789732d6970ea914086abb81db10d/index.js#L14"
                }
              ],
              "count": 1,
              "paramName": "outputMode",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/jeffrohlman/jeffrohlman.github.io/blob/0f0a44b99e1789732d6970ea914086abb81db10d/index.js#L14"
                  ],
                  "value": "json"
                }
              ]
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/jeffrohlman/jeffrohlman.github.io/blob/0f0a44b99e1789732d6970ea914086abb81db10d/index.js#L14"
                }
              ],
              "count": 1,
              "paramName": "showSourceText",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/jeffrohlman/jeffrohlman.github.io/blob/0f0a44b99e1789732d6970ea914086abb81db10d/index.js#L14"
                  ],
                  "value": "1"
                }
              ]
            }
          ],
          "topResponseFields": [
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/jeffrohlman/jeffrohlman.github.io/blob/0f0a44b99e1789732d6970ea914086abb81db10d/index.js#L14"
                }
              ],
              "count": 1,
              "fieldName": "authors.names.length",
              "source": [
                "https://github.com/jeffrohlman/jeffrohlman.github.io/blob/0f0a44b99e1789732d6970ea914086abb81db10d/index.js#L14"
              ],
              "total": 1
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/jeffrohlman/jeffrohlman.github.io/blob/0f0a44b99e1789732d6970ea914086abb81db10d/index.js#L14"
                }
              ],
              "count": 1,
              "fieldName": "concepts.length",
              "source": [
                "https://github.com/jeffrohlman/jeffrohlman.github.io/blob/0f0a44b99e1789732d6970ea914086abb81db10d/index.js#L14"
              ],
              "total": 1
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/jeffrohlman/jeffrohlman.github.io/blob/0f0a44b99e1789732d6970ea914086abb81db10d/index.js#L14"
                }
              ],
              "count": 1,
              "fieldName": "keywords.length",
              "source": [
                "https://github.com/jeffrohlman/jeffrohlman.github.io/blob/0f0a44b99e1789732d6970ea914086abb81db10d/index.js#L14"
              ],
              "total": 1
            }
          ],
          "totalUsageCount": 1
        }
      },
      "post": {
        "description": "URLGetCombinedData lets you combine multiple AlchemyLanguage webpage operations into a single API call. Concept, keyword, entity, and taxonomy operations are performed by default if no 'extract' parameter is specified.<br><br>Any of the parameters that can be passed in the individual extract methods can be passed in a combined call, but they will apply to any applicable features that are specified in the <code>extract</code> parameter. For example, if you pass <code>knowledgeGraph=1</code> in a combined request for <code>concepts</code>, <code>entities</code>, <code>keywords</code>, and <code>relations</code>, you will add a total of 4 extra transactions to the request.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/url_formData"
          },
          {
            "$ref": "#/parameters/extract_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Combined Call Response"
            }
          }
        },
        "summary": "Analyzes a web page with multiple AlchemyLanguage operations",
        "tags": ["Combined Call"]
      }
    },
    "/url/URLGetEmotion": {
      "get": {
        "description": "Detects document-level emotion conveyed by the source text. Returns scores for anger, disgust, fear, joy, and sadness.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Emotion Analysis Response"
            }
          }
        },
        "summary": "Analyzes the emotion conveyed by text from webpage",
        "tags": ["Emotion Analysis"],
        "x-apih-advice": {
          "topJQueryAjaxParams": null,
          "topPayloadParams": [
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/nbenavi/BirdTalk/blob/ffd4cf82e4685a3e7f5176dfa8295501a00fabdf/sentiment_extension/background.js#L106"
                }
              ],
              "count": 2,
              "paramName": "outputMode",
              "paramValues": [
                {
                  "count": 2,
                  "source": [
                    "https://github.com/nbenavi/BirdTalk/blob/ffd4cf82e4685a3e7f5176dfa8295501a00fabdf/node_server/get_emotions.js#L9",
                    "https://github.com/nbenavi/BirdTalk/blob/ffd4cf82e4685a3e7f5176dfa8295501a00fabdf/sentiment_extension/background.js#L106"
                  ],
                  "value": "json"
                }
              ]
            }
          ],
          "topQueryParams": [
            {
              "bestSources": [
                {
                  "sourceId": 3,
                  "url": "https://github.com/texastribune/shaman/blob/8d1bfc3369a3fdec9fb49cfb7edaf251f0072fcb/source/javascripts/all.js#L75"
                }
              ],
              "count": 3,
              "paramName": "apikey",
              "paramValues": [
                {
                  "count": 2,
                  "source": [
                    "https://github.com/jeffdiers/Q1-Project/blob/abfa357771613861f798fa6fb74374a156771ccc/public/assets/js/new.js#L134",
                    "https://github.com/jeffdiers/Q1-Project/blob/933f6a106e4e39298597f33ada87176f8396f549/public/assets/js/test.js#L96"
                  ],
                  "value": "<Hiding desensitized value>"
                },
                {
                  "count": 1,
                  "source": [
                    "https://github.com/texastribune/shaman/blob/8d1bfc3369a3fdec9fb49cfb7edaf251f0072fcb/source/javascripts/all.js#L75"
                  ],
                  "value": "<Hiding desensitized value>"
                }
              ]
            },
            {
              "bestSources": [
                {
                  "sourceId": 2,
                  "url": "https://github.com/jeffdiers/Q1-Project/blob/933f6a106e4e39298597f33ada87176f8396f549/public/assets/js/test.js#L96"
                },
                {
                  "sourceId": 3,
                  "url": "https://github.com/texastribune/shaman/blob/8d1bfc3369a3fdec9fb49cfb7edaf251f0072fcb/source/javascripts/all.js#L75"
                }
              ],
              "count": 3,
              "paramName": "outputMode",
              "paramValues": [
                {
                  "count": 3,
                  "source": [
                    "https://github.com/texastribune/shaman/blob/8d1bfc3369a3fdec9fb49cfb7edaf251f0072fcb/source/javascripts/all.js#L75",
                    "https://github.com/jeffdiers/Q1-Project/blob/abfa357771613861f798fa6fb74374a156771ccc/public/assets/js/new.js#L134",
                    "https://github.com/jeffdiers/Q1-Project/blob/933f6a106e4e39298597f33ada87176f8396f549/public/assets/js/test.js#L96"
                  ],
                  "value": "json"
                }
              ]
            }
          ],
          "topResponseFields": [
            {
              "bestSources": [
                {
                  "sourceId": 2,
                  "url": "https://github.com/jeffdiers/Q1-Project/blob/933f6a106e4e39298597f33ada87176f8396f549/public/assets/js/test.js#L96"
                },
                {
                  "sourceId": 3,
                  "url": "https://github.com/texastribune/shaman/blob/8d1bfc3369a3fdec9fb49cfb7edaf251f0072fcb/source/javascripts/all.js#L75"
                }
              ],
              "count": 3,
              "fieldName": "docEmotions",
              "source": [
                "https://github.com/texastribune/shaman/blob/8d1bfc3369a3fdec9fb49cfb7edaf251f0072fcb/source/javascripts/all.js#L75",
                "https://github.com/jeffdiers/Q1-Project/blob/abfa357771613861f798fa6fb74374a156771ccc/public/assets/js/new.js#L134",
                "https://github.com/jeffdiers/Q1-Project/blob/933f6a106e4e39298597f33ada87176f8396f549/public/assets/js/test.js#L96"
              ],
              "total": 5
            }
          ],
          "totalUsageCount": 5
        }
      },
      "post": {
        "description": "Detects document-level emotion conveyed by the source text. Returns scores for anger, disgust, fear, joy, and sadness.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Emotion Analysis Response"
            }
          }
        },
        "summary": "Analyzes the emotion conveyed by text from a webpage",
        "tags": ["Emotion Analysis"]
      }
    },
    "/url/URLGetFeedLinks": {
      "get": {
        "description": "Identifies and returns RSS/ATOM feed links found on a webpage.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Feed Detection Response"
            }
          }
        },
        "summary": "Extracts RSS/Atom feeds from a webpage",
        "tags": ["Feed Detection"]
      },
      "post": {
        "description": "Identifies and returns RSS/ATOM feed links found on a webpage.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Feed Detection Response"
            }
          }
        },
        "summary": "Extracts RSS/Atom feeds from a webpage",
        "tags": ["Feed Detection"]
      }
    },
    "/url/URLGetLanguage": {
      "get": {
        "description": "The URLGetLanguage call is utilized to detect the language utilized within a given web page. AlchemyLanguage will download the requested URL, extracting text from the HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform language detection operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Language Response"
            }
          }
        },
        "summary": "Detects the language of a web page",
        "tags": ["Language"]
      },
      "post": {
        "description": "The URLGetLanguage call is utilized to detect the language utilized within a given web page. AlchemyLanguage will download the requested URL, extracting text from the HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform language detection operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Language Response"
            }
          }
        },
        "summary": "Detects the language of a web page",
        "tags": ["Language"]
      }
    },
    "/url/URLGetMicroformatData": {
      "get": {
        "description": "The URLGetMicroformatData call is utilized to extract structured microformats data from a given web page. AlchemyLanguage will retrieve the requested URL, process the retrieved HTML document, and look for a variety of microformat data structures (hCards, geo, adr, etc.).",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Microformats Response"
            }
          }
        },
        "summary": "Extracts microformat data from a web page",
        "tags": ["Microformats"]
      },
      "post": {
        "description": "The URLGetMicroformatData call is utilized to extract structured microformats data from a given web page. AlchemyLanguage will retrieve the requested URL, process the retrieved HTML document, and look for a variety of microformat data structures (hCards, geo, adr, etc.).",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Microformats Response"
            }
          }
        },
        "summary": "Extracts microformat data from a web page",
        "tags": ["Microformats"]
      }
    },
    "/url/URLGetPubDate": {
      "get": {
        "description": "The URLGetPubDate call is utilized to extract publication date information contained within the specified web page. contained within the specified web page. AlchemyLanguage will download the requested URL, process the retrieved HTML document, looking for publication date information.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Publication Date Response"
            }
          }
        },
        "summary": "Retrieves publication date information from a web page",
        "tags": ["Publication Date"]
      },
      "post": {
        "description": "The URLGetPubDate call is utilized to extract publication date information contained within the specified web page. contained within the specified web page. AlchemyLanguage will download the requested URL, process the retrieved HTML document, looking for publication date information.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Publication Date Response"
            }
          }
        },
        "summary": "Retrieves publication date information from a web page",
        "tags": ["Publication Date"]
      }
    },
    "/url/URLGetRankedConcepts": {
      "get": {
        "description": "The URLGetRankedConcepts call is utilized to extract a relevancy-ranked list of concept tags for a given web page. AlchemyLanguage will download the requested URL, extracting text from the HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform concept tagging operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/maxRetrieve_query_concepts"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/linkedData_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Concepts Response"
            }
          }
        },
        "summary": "Returns concepts found on a web page",
        "tags": ["Concepts"]
      },
      "post": {
        "description": "The URLGetRankedConcepts call is utilized to extract a relevancy-ranked list of concept tags for a given web page. AlchemyLanguage will download the requested URL, extracting text from the HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform concept tagging operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/url_formData"
          },
          {
            "$ref": "#/parameters/maxRetrieve_formData_concepts"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/linkedData_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Concepts Response"
            }
          }
        },
        "summary": "Returns concepts found on a web page",
        "tags": ["Concepts"]
      }
    },
    "/url/URLGetRankedKeywords": {
      "get": {
        "description": "The URLGetRankedKeywords call is utilized to extract a relevancy-ranked list of topic keywords from a given web page. AlchemyLanguage will download the requested URL, extracting text from the HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform keyword extraction operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/maxRetrieve_query_keywords"
          },
          {
            "$ref": "#/parameters/sentiment_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Keywords Response"
            }
          }
        },
        "summary": "Extracts keywords from a web page",
        "tags": ["Keywords"],
        "x-apih-advice": {
          "topJQueryAjaxParams": null,
          "topPayloadParams": [
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/atheed/Perspectives/blob/d7a6c7ec9e0032107c567286b45555165e513598/extension/src/content.js#L24"
                }
              ],
              "count": 1,
              "paramName": "apikey",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/atheed/Perspectives/blob/d7a6c7ec9e0032107c567286b45555165e513598/extension/src/content.js#L24"
                  ],
                  "value": "<Hiding desensitized value>"
                }
              ]
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/atheed/Perspectives/blob/d7a6c7ec9e0032107c567286b45555165e513598/extension/src/content.js#L24"
                }
              ],
              "count": 1,
              "paramName": "keywordExtractMode",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/atheed/Perspectives/blob/d7a6c7ec9e0032107c567286b45555165e513598/extension/src/content.js#L24"
                  ],
                  "value": "strict"
                }
              ]
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/atheed/Perspectives/blob/d7a6c7ec9e0032107c567286b45555165e513598/extension/src/content.js#L24"
                }
              ],
              "count": 1,
              "paramName": "maxRetrieve",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/atheed/Perspectives/blob/d7a6c7ec9e0032107c567286b45555165e513598/extension/src/content.js#L24"
                  ],
                  "value": "10"
                }
              ]
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/atheed/Perspectives/blob/d7a6c7ec9e0032107c567286b45555165e513598/extension/src/content.js#L24"
                }
              ],
              "count": 1,
              "paramName": "outputMode",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/atheed/Perspectives/blob/d7a6c7ec9e0032107c567286b45555165e513598/extension/src/content.js#L24"
                  ],
                  "value": "json"
                }
              ]
            }
          ],
          "topQueryParams": null,
          "topResponseFields": null,
          "totalUsageCount": 1
        }
      },
      "post": {
        "description": "The URLGetRankedKeywords call is utilized to extract a relevancy-ranked list of topic keywords from a given web page. AlchemyLanguage will download the requested URL, extracting text from the HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform keyword extraction operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/url_formData"
          },
          {
            "$ref": "#/parameters/maxRetrieve_formData_keywords"
          },
          {
            "$ref": "#/parameters/sentiment_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Keywords Response"
            }
          }
        },
        "summary": "Extracts keywords from a web page",
        "tags": ["Keywords"]
      }
    },
    "/url/URLGetRankedNamedEntities": {
      "get": {
        "description": "The URLGetRankedNamedEntities call is used to extract a grouped, relevancy-ranked list of named entities (people, companies, organizations, etc.) from a given web page. AlchemyLanguage will download the requested URL, extracting text from the HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform entity extraction operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/maxRetrieve_query_entities"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/disambiguate_query"
          },
          {
            "$ref": "#/parameters/linkedData_query"
          },
          {
            "$ref": "#/parameters/coreference_query"
          },
          {
            "$ref": "#/parameters/quotations_query"
          },
          {
            "$ref": "#/parameters/sentiment_query"
          },
          {
            "$ref": "#/parameters/structuredEntities_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Entities Response"
            }
          }
        },
        "summary": "Extracts named entities (people, companies, etc) from a web page",
        "tags": ["Entities"],
        "x-apih-advice": {
          "topJQueryAjaxParams": null,
          "topPayloadParams": [
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/colintsteele/Peeper/blob/40b2c2cabe8522a5ba13e91111875cd2c6d7c0f8/contentScript.js#L35"
                }
              ],
              "count": 1,
              "paramName": "extract",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/colintsteele/Peeper/blob/40b2c2cabe8522a5ba13e91111875cd2c6d7c0f8/contentScript.js#L35"
                  ],
                  "value": "entities"
                }
              ]
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/colintsteele/Peeper/blob/40b2c2cabe8522a5ba13e91111875cd2c6d7c0f8/contentScript.js#L35"
                }
              ],
              "count": 1,
              "paramName": "maxRetrieve",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/colintsteele/Peeper/blob/40b2c2cabe8522a5ba13e91111875cd2c6d7c0f8/contentScript.js#L35"
                  ],
                  "value": "100"
                }
              ]
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/colintsteele/Peeper/blob/40b2c2cabe8522a5ba13e91111875cd2c6d7c0f8/contentScript.js#L35"
                }
              ],
              "count": 1,
              "paramName": "outputMode",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/colintsteele/Peeper/blob/40b2c2cabe8522a5ba13e91111875cd2c6d7c0f8/contentScript.js#L35"
                  ],
                  "value": "json"
                }
              ]
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/colintsteele/Peeper/blob/40b2c2cabe8522a5ba13e91111875cd2c6d7c0f8/contentScript.js#L35"
                }
              ],
              "count": 1,
              "paramName": "sentiment",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/colintsteele/Peeper/blob/40b2c2cabe8522a5ba13e91111875cd2c6d7c0f8/contentScript.js#L35"
                  ],
                  "value": "1"
                }
              ]
            }
          ],
          "topQueryParams": null,
          "topResponseFields": [
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/colintsteele/Peeper/blob/40b2c2cabe8522a5ba13e91111875cd2c6d7c0f8/contentScript.js#L35"
                }
              ],
              "count": 1,
              "fieldName": "entities",
              "source": [
                "https://github.com/colintsteele/Peeper/blob/40b2c2cabe8522a5ba13e91111875cd2c6d7c0f8/contentScript.js#L35"
              ],
              "total": 1
            }
          ],
          "totalUsageCount": 1
        }
      },
      "post": {
        "description": "The URLGetRankedNamedEntities call is used to extract a grouped, relevancy-ranked list of named entities (people, companies, organizations, etc.) from a given web page. AlchemyLanguage will download the requested URL, extracting text from the HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform entity extraction operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/url_formData"
          },
          {
            "$ref": "#/parameters/maxRetrieve_formData_entities"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/disambiguate_formData"
          },
          {
            "$ref": "#/parameters/linkedData_formData"
          },
          {
            "$ref": "#/parameters/coreference_formData"
          },
          {
            "$ref": "#/parameters/quotations_formData"
          },
          {
            "$ref": "#/parameters/sentiment_formData"
          },
          {
            "$ref": "#/parameters/structuredEntities_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Entities Response"
            }
          }
        },
        "summary": "Extracts named entities (people, companies, etc) from a web page",
        "tags": ["Entities"]
      }
    },
    "/url/URLGetRankedTaxonomy": {
      "get": {
        "description": "The URLGetRankedTaxonomy call is used to categorize a posted URL document. AlchemyLanguage will download the requested URL, extracting text from the HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform taxonomy classification operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Taxonomy Results"
            }
          }
        },
        "summary": "Categorizes the content of a web page",
        "tags": ["Taxonomy"],
        "x-apih-advice": {
          "topJQueryAjaxParams": null,
          "topPayloadParams": [
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/mingyli/calhacks-ethos/blob/c7de7aa088571f9b20f78c8d2cf004d3cde708d3/src/popup.js#L90"
                }
              ],
              "count": 1,
              "paramName": "outputMode",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/mingyli/calhacks-ethos/blob/c7de7aa088571f9b20f78c8d2cf004d3cde708d3/src/popup.js#L90"
                  ],
                  "value": "json"
                }
              ]
            }
          ],
          "topQueryParams": null,
          "topResponseFields": [
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/mingyli/calhacks-ethos/blob/c7de7aa088571f9b20f78c8d2cf004d3cde708d3/src/popup.js#L90"
                }
              ],
              "count": 1,
              "fieldName": "taxonomy.0.label",
              "source": [
                "https://github.com/mingyli/calhacks-ethos/blob/c7de7aa088571f9b20f78c8d2cf004d3cde708d3/src/popup.js#L90"
              ],
              "total": 1
            }
          ],
          "totalUsageCount": 1
        }
      },
      "post": {
        "description": "The URLGetRankedTaxonomy call is used to categorize a posted URL document. AlchemyLanguage will download the requested URL, extracting text from the HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform taxonomy classification operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Taxonomy Results"
            }
          }
        },
        "summary": "Categorizes the content of a web page",
        "tags": ["Taxonomy"]
      }
    },
    "/url/URLGetRawText": {
      "get": {
        "description": "The URLGetRawText call is utilized to extract all text from a web page. AlchemyLanguage will download the requested URL, extract text from the HTML document structure, including page navigation, advertisements, and other page content. To ignore this content, please use the URLGetText call.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        },
        "summary": "Extracts all text from a web page",
        "tags": ["Text Extraction"]
      },
      "post": {
        "description": "The URLGetRawText call is utilized to extract all text from a web page. AlchemyLanguage will download the requested URL, extract text from the HTML document structure, including page navigation, advertisements, and other page content. To ignore this content, please use the URLGetText call.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        },
        "summary": "Extracts all text from a web page",
        "tags": ["Text Extraction"]
      }
    },
    "/url/URLGetRelations": {
      "get": {
        "description": "The URLGetRelations call is utilized to extract Subject-Action-Object relations from a given web page. AlchemyLanguage will download the requested URL, extracting text from the HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform relation extraction operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/maxRetrieve_query_relations"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/disambiguate_query"
          },
          {
            "$ref": "#/parameters/linkedData_query"
          },
          {
            "$ref": "#/parameters/coreference_query"
          },
          {
            "$ref": "#/parameters/sentiment_query"
          },
          {
            "$ref": "#/parameters/keywords_query"
          },
          {
            "$ref": "#/parameters/entities_query"
          },
          {
            "$ref": "#/parameters/requireEntities_query"
          },
          {
            "$ref": "#/parameters/sentimentExcludeEntities_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Relations Response"
            }
          }
        },
        "summary": "Extracts Subject-Action-Object relations from a web page",
        "tags": ["Relations"]
      },
      "post": {
        "description": "The URLGetRelations call is utilized to extract Subject-Action-Object relations from a given web page. AlchemyLanguage will download the requested URL, extracting text from the HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform relation extraction operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/maxRetrieve_query_relations"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/disambiguate_query"
          },
          {
            "$ref": "#/parameters/linkedData_query"
          },
          {
            "$ref": "#/parameters/coreference_query"
          },
          {
            "$ref": "#/parameters/sentiment_query"
          },
          {
            "$ref": "#/parameters/keywords_query"
          },
          {
            "$ref": "#/parameters/entities_query"
          },
          {
            "$ref": "#/parameters/requireEntities_query"
          },
          {
            "$ref": "#/parameters/sentimentExcludeEntities_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          },
          {
            "$ref": "#/parameters/knowledgeGraph_query"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Relations Response"
            }
          }
        },
        "summary": "Extracts Subject-Action-Object relations from a web page",
        "tags": ["Relations"]
      }
    },
    "/url/URLGetTargetedEmotion": {
      "get": {
        "description": "Searches the source text for specified target phrases and analyzes the emotions that they convey. Returns scores for anger, disgust, fear, joy, and sadness.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/targets_query_emotion"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Targeted Emotion Response"
            }
          }
        },
        "summary": "Analyzes the emotion conveyed by target phrases from a webpage",
        "tags": ["Emotion Analysis"]
      },
      "post": {
        "description": "Searches the source text for specified target phrases and analyzes the emotions that they convey. Returns scores for anger, disgust, fear, joy, and sadness.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/url_formData"
          },
          {
            "$ref": "#/parameters/targets_formData_emotion"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Targeted Emotion Response"
            }
          }
        },
        "summary": "Analyzes the emotion conveyed by target phrases from a webpage",
        "tags": ["Emotion Analysis"]
      }
    },
    "/url/URLGetTargetedSentiment": {
      "get": {
        "description": "The URLGetTargetedSentiment call is utilized to extract positive / negative sentiment targeted towards a specific user-specified target phrase inside the text of a given web page. AlchemyLanguage will download the requested URL, extracting text from the HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform sentiment extraction operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/targets_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Targeted Sentiment Response"
            }
          }
        },
        "summary": "Returns sentiment information for specified phrases on a web page",
        "tags": ["Sentiment"]
      },
      "post": {
        "description": "The URLGetTargetedSentiment call is utilized to extract positive / negative sentiment targeted towards a specific user-specified target phrase inside the text of a given web page. AlchemyLanguage will download the requested URL, extracting text from the HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform sentiment extraction operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/url_formData"
          },
          {
            "$ref": "#/parameters/targets_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Targeted Sentiment Response"
            }
          }
        },
        "summary": "Returns sentiment information for specified phrases on a web page",
        "tags": ["Sentiment"]
      }
    },
    "/url/URLGetText": {
      "get": {
        "description": "The URLGetText call is utilized to extract the primary page / article text from a web page. AlchemyLanguage will download the requested URL, extract text from the HTML document structure, and ignore page navigation, advertisements, and other undesirable page content.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/useMetadata_query"
          },
          {
            "$ref": "#/parameters/extractLinks_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        },
        "summary": "Extracts primary text from a web page (avoids advertisements and other undesirable content)",
        "tags": ["Text Extraction"],
        "x-apih-advice": {
          "topJQueryAjaxParams": null,
          "topPayloadParams": null,
          "topQueryParams": null,
          "topResponseFields": null,
          "totalUsageCount": 1
        }
      },
      "post": {
        "description": "The URLGetText call is utilized to extract the primary page / article text from a web page. AlchemyLanguage will download the requested URL, extract text from the HTML document structure, and ignore page navigation, advertisements, and other undesirable page content.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/useMetadata_formData"
          },
          {
            "$ref": "#/parameters/extractLinks_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        },
        "summary": "Extracts primary text from a web page (avoids advertisements and other undesirable content)",
        "tags": ["Text Extraction"]
      }
    },
    "/url/URLGetTextSentiment": {
      "get": {
        "description": "The URLGetTextSentiment call is utilized to extract positive/negative sentiment from a given web page. AlchemyLanguage will download the requested URL, extracting text from the HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform sentiment extraction operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          },
          {
            "$ref": "#/parameters/showSourceText_query"
          },
          {
            "$ref": "#/parameters/sourceText_query"
          },
          {
            "$ref": "#/parameters/cquery_query"
          },
          {
            "$ref": "#/parameters/xpath_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Document Sentiment Response"
            }
          }
        },
        "summary": "Returns sentiment information for a web page",
        "tags": ["Sentiment"],
        "x-apih-advice": {
          "topJQueryAjaxParams": null,
          "topPayloadParams": [
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/mingyli/calhacks-ethos/blob/b77e2f39854997872cbef11135134a3ec7a277cf/src/facebook-scraper.js#L36"
                },
                {
                  "sourceId": 2,
                  "url": "https://github.com/mingyli/calhacks-ethos/blob/c7de7aa088571f9b20f78c8d2cf004d3cde708d3/src/popup.js#L60"
                }
              ],
              "count": 2,
              "paramName": "outputMode",
              "paramValues": [
                {
                  "count": 2,
                  "source": [
                    "https://github.com/mingyli/calhacks-ethos/blob/c7de7aa088571f9b20f78c8d2cf004d3cde708d3/src/popup.js#L60",
                    "https://github.com/mingyli/calhacks-ethos/blob/b77e2f39854997872cbef11135134a3ec7a277cf/src/facebook-scraper.js#L36"
                  ],
                  "value": "json"
                }
              ]
            }
          ],
          "topQueryParams": [
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/mingyli/calhacks-ethos/blob/b77e2f39854997872cbef11135134a3ec7a277cf/src/facebook-scraper.js#L36"
                }
              ],
              "count": 1,
              "paramName": "apikey",
              "paramValues": [
                {
                  "count": 1,
                  "source": [
                    "https://github.com/mingyli/calhacks-ethos/blob/b77e2f39854997872cbef11135134a3ec7a277cf/src/facebook-scraper.js#L36"
                  ],
                  "value": "<Hiding desensitized value>"
                }
              ]
            }
          ],
          "topResponseFields": [
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/mingyli/calhacks-ethos/blob/b77e2f39854997872cbef11135134a3ec7a277cf/src/facebook-scraper.js#L36"
                },
                {
                  "sourceId": 2,
                  "url": "https://github.com/mingyli/calhacks-ethos/blob/c7de7aa088571f9b20f78c8d2cf004d3cde708d3/src/popup.js#L60"
                }
              ],
              "count": 2,
              "fieldName": "docSentiment.score",
              "source": [
                "https://github.com/mingyli/calhacks-ethos/blob/c7de7aa088571f9b20f78c8d2cf004d3cde708d3/src/popup.js#L60",
                "https://github.com/mingyli/calhacks-ethos/blob/b77e2f39854997872cbef11135134a3ec7a277cf/src/facebook-scraper.js#L36"
              ],
              "total": 2
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/mingyli/calhacks-ethos/blob/b77e2f39854997872cbef11135134a3ec7a277cf/src/facebook-scraper.js#L36"
                }
              ],
              "count": 1,
              "fieldName": "status",
              "source": [
                "https://github.com/mingyli/calhacks-ethos/blob/b77e2f39854997872cbef11135134a3ec7a277cf/src/facebook-scraper.js#L36"
              ],
              "total": 2
            },
            {
              "bestSources": [
                {
                  "sourceId": 1,
                  "url": "https://github.com/mingyli/calhacks-ethos/blob/b77e2f39854997872cbef11135134a3ec7a277cf/src/facebook-scraper.js#L36"
                }
              ],
              "count": 1,
              "fieldName": "url",
              "source": [
                "https://github.com/mingyli/calhacks-ethos/blob/b77e2f39854997872cbef11135134a3ec7a277cf/src/facebook-scraper.js#L36"
              ],
              "total": 2
            }
          ],
          "totalUsageCount": 2
        }
      },
      "post": {
        "description": "The URLGetTextSentiment call is utilized to extract positive/negative sentiment from a given web page. AlchemyLanguage will download the requested URL, extracting text from the HTML document structure (ignoring navigation links, advertisements, and other undesirable content), and perform sentiment extraction operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/showSourceText_formData"
          },
          {
            "$ref": "#/parameters/sourceText_formData"
          },
          {
            "$ref": "#/parameters/cquery_formData"
          },
          {
            "$ref": "#/parameters/xpath_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Document Sentiment Response"
            }
          }
        },
        "summary": "Returns sentiment information for a web page",
        "tags": ["Sentiment"]
      }
    },
    "/url/URLGetTitle": {
      "get": {
        "description": "The URLGetTitle call is utilized to extract title information from a web page. The requested URL is downloaded, and the retrieved HTML document is processed, extracting any title information.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/useMetadata_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Title"
            }
          }
        },
        "summary": "Extracts title information from a web page",
        "tags": ["Title Extraction"]
      },
      "post": {
        "description": "The URLGetTitle call is utilized to extract title information from a web page. The requested URL is downloaded, and the retrieved HTML document is processed, extracting any title information.",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/url_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/useMetadata_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Title"
            }
          }
        },
        "summary": "Extracts title information from a web page",
        "tags": ["Title Extraction"]
      }
    },
    "/url/URLGetTypedRelations": {
      "get": {
        "description": "Identifies entities in the text from a webpage and returns different types of relations that exist between them. For example, the entities \"Oscar\" and \"Leonardo DiCaprio\" might be linked by an \"awardedTo\" relation. To tailor results to your domain, you can specify your own custom entities and relations with custom models in Watson Knowledge Studio",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_query"
          },
          {
            "$ref": "#/parameters/url_query"
          },
          {
            "$ref": "#/parameters/model_query"
          },
          {
            "$ref": "#/parameters/outputMode_query"
          },
          {
            "$ref": "#/parameters/jsonp_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Typed Relations Response"
            }
          }
        },
        "summary": "Identifies relations between entities found in text from a webpage",
        "tags": ["Typed Relations"]
      },
      "post": {
        "description": "Identifies entities in the text from a webpage and returns different types of relations that exist between them. For example, the entities \"Oscar\" and \"Leonardo DiCaprio\" might be linked by an \"awardedTo\" relation. To tailor results to your domain, you can specify your own custom entities and relations with custom models in Watson Knowledge Studio",
        "parameters": [
          {
            "$ref": "#/parameters/apikey_formData"
          },
          {
            "$ref": "#/parameters/url_formData"
          },
          {
            "$ref": "#/parameters/model_formData"
          },
          {
            "$ref": "#/parameters/outputMode_formData"
          },
          {
            "$ref": "#/parameters/jsonp_formData"
          },
          {
            "$ref": "#/parameters/content_type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/Typed Relations Response"
            }
          }
        },
        "summary": "Identifies relations between entities found in text from a webpage",
        "tags": ["Typed Relations"]
      }
    }
  },
  "produces": ["application/json", "application/xml"],
  "schemes": ["https"],
  "swagger": "2.0",
  "x-apih-ghusage": {
    "count": 0,
    "topUsages": [
      {
        "description": "Repo for g15 1st quarter project",
        "forks": 0,
        "language": "JavaScript",
        "repoUrl": "https://github.com/wjohnson1000/Frontend_Personal_Project",
        "repository": "wjohnson1000/Frontend_Personal_Project",
        "sources": [
          "https://github.com/wjohnson1000/Frontend_Personal_Project/blob/fd1244fae8a9932819ed287c6f53611b1acd6158/source/scripts/main.js"
        ],
        "stargazers": 2,
        "subscribers": 2,
        "watchers": 2
      },
      {
        "description": "Soccer manager game written in javascript with p5.js",
        "forks": 1,
        "language": "JavaScript",
        "repoUrl": "https://github.com/Dirichi/SimpleSoccerManager",
        "repository": "Dirichi/SimpleSoccerManager",
        "sources": [
          "https://github.com/Dirichi/SimpleSoccerManager/blob/aa723f9e184c0be695449c9a0494e4f916d89c11/public/js/script.js",
          "https://github.com/Dirichi/SimpleSoccerManager/blob/aa723f9e184c0be695449c9a0494e4f916d89c11/public/js/main.js"
        ],
        "stargazers": 1,
        "subscribers": 1,
        "watchers": 1
      },
      {
        "description": "code, data, tech in a day",
        "forks": 1,
        "language": "JavaScript",
        "repoUrl": "https://github.com/DecodedCo/digital-leadership-full-day",
        "repository": "DecodedCo/digital-leadership-full-day",
        "sources": [
          "https://github.com/DecodedCo/digital-leadership-full-day/blob/cc77e32fb8b38ad93dae1c5801f9d273bb6e6563/analysis.js",
          "https://github.com/DecodedCo/digital-leadership-full-day/blob/cc77e32fb8b38ad93dae1c5801f9d273bb6e6563/25May16/script.js"
        ],
        "stargazers": 0,
        "subscribers": 14,
        "watchers": 0
      },
      {
        "description": "group version",
        "forks": 0,
        "language": "JavaScript",
        "repoUrl": "https://github.com/SongHia/tilly",
        "repository": "SongHia/tilly",
        "sources": [
          "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/summary.js",
          "https://github.com/SongHia/tilly/blob/a14e10a7636164698464cb9348c6bb6329f00c72/public/js/remember.js"
        ],
        "stargazers": 0,
        "subscribers": 1,
        "watchers": 0
      },
      {
        "description": "Analyze your instagram pictures to provide you with places to travel. -Emirates Hackathon",
        "forks": 0,
        "language": "HTML",
        "repoUrl": "https://github.com/lareinating/yolo",
        "repository": "lareinating/yolo",
        "sources": [
          "https://github.com/lareinating/yolo/blob/3adbc034210b127743eda47815f12f8a8bcc957f/client/templates/analyzeInsta/analyzeInsta.js"
        ],
        "stargazers": 0,
        "subscribers": 2,
        "watchers": 0
      },
      {
        "description": "A microdiary webapp using the express.js framework.",
        "forks": 0,
        "language": "JavaScript",
        "repoUrl": "https://github.com/SongHia/tilly-app-boilerplate",
        "repository": "SongHia/tilly-app-boilerplate",
        "sources": [
          "https://github.com/SongHia/tilly-app-boilerplate/blob/2423bf9c6cb71bdb9078b6f8126e11d1100493fd/public/js/remember.js"
        ],
        "stargazers": 0,
        "subscribers": 1,
        "watchers": 0
      },
      {
        "description": "Whazzat?! - The sentiment analysis app",
        "forks": 0,
        "language": "JavaScript",
        "repoUrl": "https://github.com/khsagehorn/whazzat",
        "repository": "khsagehorn/whazzat",
        "sources": [
          "https://github.com/khsagehorn/whazzat/blob/b84dc0d2dc27c1a2302c47941e4af98b05c33076/src/js/functions.js"
        ],
        "stargazers": 0,
        "subscribers": 0,
        "watchers": 0
      },
      {
        "description": "A Chrome Extension that finds and displays articles similar to the one you're currently reading -- to give you perspective",
        "forks": 0,
        "language": "JavaScript",
        "repoUrl": "https://github.com/atheed/Perspectives",
        "repository": "atheed/Perspectives",
        "sources": [
          "https://github.com/atheed/Perspectives/blob/d7a6c7ec9e0032107c567286b45555165e513598/extension/src/content.js"
        ],
        "stargazers": 0,
        "subscribers": 1,
        "watchers": 0
      },
      {
        "description": "A simple app to help instructors distill and track student pain points after class.",
        "forks": 1,
        "language": "HTML",
        "repoUrl": "https://github.com/nlapier/Pain-Points-Postcard",
        "repository": "nlapier/Pain-Points-Postcard",
        "sources": [
          "https://github.com/nlapier/Pain-Points-Postcard/blob/fd1a0df3de8e4f1b88272c3fa5e58ce4ae700f55/ppp.js"
        ],
        "stargazers": 0,
        "subscribers": 2,
        "watchers": 0
      },
      {
        "description": null,
        "forks": 0,
        "language": "JavaScript",
        "repoUrl": "https://github.com/wjohnson1000/wjohnson1000.github.io",
        "repository": "wjohnson1000/wjohnson1000.github.io",
        "sources": [
          "https://github.com/wjohnson1000/wjohnson1000.github.io/blob/cb99bea35ebb38d6a246fd1da701d83550d769a5/scripts/main.js"
        ],
        "stargazers": 0,
        "subscribers": 1,
        "watchers": 0
      }
    ]
  },
  "x-apih-id": "ibm_watson_alchemy_language_api",
  "x-apih-relationships": [
    {
      "commonUsages": [
        {
          "github_repo_name": "wjohnson1000/Frontend_Personal_Project",
          "stargazers_count": 2
        },
        {
          "github_repo_name": "Dirichi/SimpleSoccerManager",
          "stargazers_count": 1
        },
        {
          "github_repo_name": "khsagehorn/whazzat",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "khsagehorn/Unit1-Project",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "SongHia/today-i-learned",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "SongHia/tilly",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "lareinating/yolo",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "SongHia/tilly-app-boilerplate",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "atheed/Perspectives",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "nlapier/Pain-Points-Postcard",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "wjohnson1000/wjohnson1000.github.io",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "YuhuiDai/Dream-Journal-Entry",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "sfaries/AlchemyNews",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "jasminekkochar/Project-Five",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "DecodedCo/digital-leadership-full-day",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "sickle5stone/FishyBusiness",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "kongyujian/Fishackathon2016_Geospatial",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "jeffrohlman/jeffrohlman.github.io",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "alexbtk/amos-ss16-proj9",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "Liux0047/watsonapp",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "ljm7b2/advSftwrEngnrTest",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "nlapier/liri-node-app",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "cmoulika009/ASE-Lab-Assignments",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "texastribune/shaman",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "desaiuditd/incognitech-watson-chat",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "FlyMoe/Candidus-Informatio",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "alexlcortes/another-test-repo",
          "stargazers_count": 0
        }
      ],
      "relatedApiId": "ibm_watson_alchemy_vision_api"
    },
    {
      "commonUsages": [
        {
          "github_repo_name": "wjohnson1000/Frontend_Personal_Project",
          "stargazers_count": 2
        },
        {
          "github_repo_name": "wjohnson1000/wjohnson1000.github.io",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "sfaries/AlchemyNews",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "sickle5stone/FishyBusiness",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "kongyujian/Fishackathon2016_Geospatial",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "alexbtk/amos-ss16-proj9",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "Liux0047/watsonapp",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "ljm7b2/advSftwrEngnrTest",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "cmoulika009/ASE-Lab-Assignments",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "FlyMoe/Candidus-Informatio",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "alexlcortes/another-test-repo",
          "stargazers_count": 0
        }
      ],
      "relatedApiId": "ibm_watson_alchemy_data_news_api"
    },
    {
      "commonUsages": [
        {
          "github_repo_name": "sickle5stone/FishyBusiness",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "kongyujian/Fishackathon2016_Geospatial",
          "stargazers_count": 0
        }
      ],
      "relatedApiId": "yahoo_weather_api"
    },
    {
      "commonUsages": [
        {
          "github_repo_name": "FlyMoe/Candidus-Informatio",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "alexlcortes/another-test-repo",
          "stargazers_count": 0
        }
      ],
      "relatedApiId": "google_civic_info_api"
    },
    {
      "commonUsages": [
        {
          "github_repo_name": "FlyMoe/Candidus-Informatio",
          "stargazers_count": 0
        },
        {
          "github_repo_name": "alexlcortes/another-test-repo",
          "stargazers_count": 0
        }
      ],
      "relatedApiId": "google_civicinfo_api"
    },
    {
      "commonUsages": [
        {
          "github_repo_name": "DecodedCo/digital-leadership-full-day",
          "stargazers_count": 0
        }
      ],
      "relatedApiId": "uber_api"
    }
  ],
  "x-apih-sdks": [
    {
      "description": "An Alchemy API library for Node.js",
      "downloads": {
        "last-day": 264,
        "last-month": 17526,
        "last-week": 3885
      },
      "language": "JavaScript",
      "license": "MIT",
      "name": "alchemy-api",
      "repoUrl": "git+ssh://git@github.com/framingeinstein/node-alchemy",
      "url": "https://www.npmjs.com/package/alchemy-api"
    },
    {
      "description": "A collection of extra Node-RED nodes for IBM Bluemix.",
      "downloads": {
        "last-day": 252,
        "last-month": 15192,
        "last-week": 3353
      },
      "language": "JavaScript",
      "license": "Apache-2.0",
      "name": "node-red-bluemix-nodes",
      "repoUrl": "git+https://github.com/node-red/node-red-bluemix-nodes",
      "url": "https://www.npmjs.com/package/node-red-bluemix-nodes"
    },
    {
      "description": "This package name is not currently in use, but was formerly occupied by another package. To avoid malicious use, npm is hanging on to the package name, but loosely, and we'll probably give it to you if you want it.",
      "downloads": {
        "last-day": 0,
        "last-month": 17,
        "last-week": 3
      },
      "language": "JavaScript",
      "license": "ISC",
      "name": "allthejs",
      "repoUrl": "git+https://github.com/npm/security-holder",
      "url": "https://www.npmjs.com/package/allthejs"
    }
  ]
}
